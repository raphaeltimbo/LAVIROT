import pytest
from LaviRot.elements import *
from LaviRot.rotor import *
from LaviRot.results import MAC_modes
import numpy as np
from numpy.testing import assert_almost_equal, assert_allclose


@pytest.fixture
def rotor1():
    #  Rotor without damping with 2 shaft elements - no disks and no bearings
    le_ = 0.25
    i_d_ = 0
    o_d_ = 0.05
    E_ = 211e9
    G_ = 81.2e9
    rho_ = 7810

    tim0 = ShaftElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)
    tim1 = ShaftElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)

    shaft_elm = [tim0, tim1]
    return Rotor(shaft_elm, [], [])


def test_index_eigenvalues_rotor1(rotor1):
    evalues = np.array([-3.8 + 68.6j, -3.8 - 68.6j, -1.8 + 30.j, -1.8 - 30.j, -0.7 + 14.4j, -0.7 - 14.4j])
    evalues2 = np.array([0. + 68.7j, 0. - 68.7j, 0. + 30.1j, 0. - 30.1j, -0. + 14.4j, -0. - 14.4j])
    assert_almost_equal([4, 2, 0, 1, 3, 5], rotor1._index(evalues))
    assert_almost_equal([4, 2, 0, 1, 3, 5], rotor1._index(evalues2))


def test_mass_matrix_rotor1(rotor1):
    Mr1 = np.array([[ 1.421,  0.   ,  0.   ,  0.049,  0.496,  0.   ,  0.   , -0.031,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   ,  1.421, -0.049,  0.   ,  0.   ,  0.496,  0.031,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   , -0.049,  0.002,  0.   ,  0.   , -0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.049,  0.   ,  0.   ,  0.002,  0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.496,  0.   ,  0.   ,  0.031,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   , -0.031],
                    [ 0.   ,  0.496, -0.031,  0.   ,  0.   ,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.031,  0.   ],
                    [ 0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.   ,  0.   , -0.031, -0.002,  0.   ],
                    [-0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.031,  0.   ,  0.   , -0.002],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   ,  0.031,  1.421,  0.   ,  0.   , -0.049],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.496, -0.031,  0.   ,  0.   ,  1.421,  0.049,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.049,  0.002,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   , -0.031,  0.   ,  0.   , -0.002, -0.049,  0.   ,  0.   ,  0.002]])

    assert_almost_equal(rotor1.M(), Mr1, decimal=3)


@pytest.fixture
def rotor2():
    #  Rotor without damping with 2 shaft elements 1 disk and 2 bearings
    le_ = 0.25
    i_d_ = 0
    o_d_ = 0.05
    E_ = 211e9
    G_ = 81.2e9
    rho_ = 7810

    tim0 = ShaftElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)
    tim1 = ShaftElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)

    shaft_elm = [tim0, tim1]
    disk0 = DiskElement(1, rho_, 0.07, 0.05, 0.28)
    stf = 1e6
    bearing0 = BearingElement(0, stf, stf, 0, 0)
    bearing1 = BearingElement(2, stf, stf, 0, 0)

    return Rotor(shaft_elm, [disk0], [bearing0, bearing1])


def test_mass_matrix_rotor2(rotor2):
    Mr2 = np.array([[  1.421,   0.   ,   0.   ,   0.049,   0.496,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,   1.421,  -0.049,   0.   ,   0.   ,   0.496,   0.031,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,  -0.049,   0.002,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.049,   0.   ,   0.   ,   0.002,   0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.496,   0.   ,   0.   ,   0.031,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,  -0.031],
                    [  0.   ,   0.496,  -0.031,   0.   ,   0.   ,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.031,   0.   ],
                    [  0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ],
                    [ -0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.031,   0.   ,   0.   ,  -0.002],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,   0.031,   1.421,   0.   ,   0.   ,  -0.049],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.496,  -0.031,   0.   ,   0.   ,   1.421,   0.049,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.049,   0.002,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,  -0.002,  -0.049,   0.   ,   0.   ,   0.002]])
    assert_almost_equal(rotor2.M(), Mr2, decimal=3)


def test_a0_0_matrix_rotor2(rotor2):
    A0_0 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
    assert_almost_equal(rotor2.A()[:12, :12], A0_0, decimal=3)


def test_a0_1_matrix_rotor2(rotor2):
    A0_1 = np.array([[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]])
    assert_almost_equal(rotor2.A()[:12, 12:24], A0_1, decimal=3)


def test_a1_0_matrix_rotor2(rotor2):
    A1_0 = np.array([[  20.63 ,   -0.   ,    0.   ,    4.114,  -20.958,    0.   ,    0.   ,    1.11 ,    0.056,   -0.   ,   -0.   ,   -0.014],
                     [   0.   ,   20.63 ,   -4.114,    0.   ,   -0.   ,  -20.958,   -1.11 ,    0.   ,   -0.   ,    0.056,    0.014,    0.   ],
                     [   0.   ,  697.351, -131.328,    0.   ,   -0.   , -705.253,  -44.535,    0.   ,   -0.   ,    2.079,    0.596,    0.   ],
                     [-697.351,    0.   ,   -0.   , -131.328,  705.253,   -0.   ,   -0.   ,  -44.535,   -2.079,    0.   ,    0.   ,    0.596],
                     [   0.442,    0.   ,   -0.   ,    0.072,   -0.887,   -0.   ,   -0.   ,   -0.   ,    0.442,    0.   ,    0.   ,   -0.072],
                     [   0.   ,    0.442,   -0.072,    0.   ,   -0.   ,   -0.887,    0.   ,    0.   ,    0.   ,    0.442,    0.072,   -0.   ],
                     [   0.   ,    6.457,   -0.837,    0.   ,   -0.   ,    0.   ,   -1.561,    0.   ,   -0.   ,   -6.457,   -0.837,   -0.   ],
                     [  -6.457,   -0.   ,    0.   ,   -0.837,    0.   ,    0.   ,    0.   ,   -1.561,    6.457,    0.   ,    0.   ,   -0.837],
                     [   0.056,   -0.   ,    0.   ,    0.014,  -20.958,    0.   ,    0.   ,   -1.11 ,   20.63 ,    0.   ,    0.   ,   -4.114],
                     [   0.   ,    0.056,   -0.014,    0.   ,   -0.   ,  -20.958,    1.11 ,    0.   ,    0.   ,   20.63 ,    4.114,   -0.   ],
                     [  -0.   ,   -2.079,    0.596,   -0.   ,    0.   ,  705.253,  -44.535,   -0.   ,   -0.   , -697.351, -131.328,    0.   ],
                     [   2.079,    0.   ,   -0.   ,    0.596, -705.253,   -0.   ,    0.   ,  -44.535,  697.351,    0.   ,    0.   , -131.328]])
    assert_almost_equal(rotor2.A()[12:24, :12]/1e7, A1_0, decimal=3)


def test_a1_1_matrix_rotor2(rotor2):
    A1_1 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
    assert_almost_equal(rotor2.A()[12:24, 12:24] / 1e7, A1_1, decimal=3)


def test_evals_sorted_rotor2(rotor2):
    evals_sorted = np.array([  1.4667459679e-12 +215.3707255735j,   3.9623200168e-12 +215.3707255733j,
                               7.4569772223e-11 +598.0247411492j,   1.1024641658e-11 +598.0247411456j,
                               4.3188161105e-09+3956.2249777612j,   2.5852376472e-11+3956.2249797838j,
                               4.3188161105e-09-3956.2249777612j,   2.5852376472e-11-3956.2249797838j,
                               7.4569772223e-11 -598.0247411492j,   1.1024641658e-11 -598.0247411456j,
                               1.4667459679e-12 -215.3707255735j,   3.9623200168e-12 -215.3707255733j])

    evals_sorted_w_10000 = np.array([  8.3087982977e-14  +34.8221380094j,   5.0452453663e-01 +215.3690114321j,
                                       -5.0452453663e-01 +215.3690114322j,  -7.1409152053e-07+3470.8976161552j,
                                       6.9042014718e-07+3850.2126301237j,   4.1762911393e+01+3990.2290333015j,
                                       4.1762911393e+01-3990.2290333015j,   6.9042014718e-07-3850.2126301237j,
                                       -7.1409152053e-07-3470.8976161552j,   5.0452453663e-01 -215.3690114321j,
                                       -5.0452453663e-01 -215.3690114322j,   8.3087982977e-14  -34.8221380094j])

    rotor2_evals, rotor2_evects = rotor2._eigen()
    assert_allclose(rotor2_evals, evals_sorted, rtol=1e-3)
    assert_allclose(rotor2.evalues, evals_sorted, rtol=1e-3)
    rotor2.w = 10000
    assert_allclose(rotor2.evalues, evals_sorted_w_10000, rtol=1e-3)


def test_evals_not_sorted_rotor2(rotor2):
    evals = np.array([  7.854e-12 -215.371j,   7.854e-12 +215.371j,
                        -1.883e-10 -598.025j,  -1.883e-10 +598.025j,
                        -3.267e-11 -215.371j,  -3.267e-11 +215.371j,
                        -2.204e-11 -598.025j,  -2.204e-11 +598.025j,
                        2.748e-10-3956.225j,   2.748e-10+3956.225j,
                        -4.253e-09-3956.225j,  -4.253e-09+3956.225j])

    rotor2_evals, rotor2_evects = rotor2._eigen(sorted_=False)
    assert_almost_equal(rotor2_evals, evals, decimal=3)


def test_evects_sorted_rotor2(rotor2):
    evects_sorted = np.array([[  2.404844579272216297666231454855e-03 +3.799948879938288670132101598753e-06j,  -2.222570374956242805070116830279e-03 -9.275083648757857920572056364961e-04j,   3.330224707666408517941396619233e-06 -1.770503036672464800948406660197e-04j,  -1.672660491703958712209759918110e-04 -5.173737268428824526709033926331e-05j],
                              [ -5.050051190448181593142806811159e-04 +1.809543333464602398699856700137e-05j,   4.738944176638554728504815205525e-04 +1.182486676229493253835467481139e-04j,  -3.753547536098892578674537587324e-06 -1.570826771357152135729501329919e-04j,  -1.504845227171065693422269404778e-04 -5.240876344384459099151607475164e-05j],
                              [  2.289619798958372341897427038049e-04 -8.204206427039661329815231627371e-06j,  -2.148568401348507439594520684878e-04 -5.361222696140100196218400419035e-05j,  -1.459312001736182131067607464781e-05 -6.107092925089127859877846660197e-04j,  -5.850568508116115156586500845037e-04 -2.037558782900449299950451642616e-04j],
                              [  1.090321573881449738335769339415e-03 +1.722841583650060529720295446343e-06j,  -1.007681099299133223659574731812e-03 -4.205188097792810528012530379982e-04j,  -1.294731673766752861026285009727e-05 +6.883398453514985972437334460494e-04j,   6.503004176426375191125139885173e-04 +2.011456313538594509356116635246e-04j],
                              [  2.588934790072348456763107193979e-03 +4.090833952731753662523505460369e-06j,  -2.392707544056614423627626919711e-03 -9.985088826974944722913996031366e-04j,   7.763797425032086452168508764432e-17 +1.001734717207814546873713662483e-15j,   9.736780650090401787152695581358e-16 +3.471816070187899762122448811451e-16j],
                              [ -5.436631261443727273358073048826e-04 +1.948063392753761967454879944217e-05j,   5.101709088747491188317595423030e-04 +1.273005715741247316497020136694e-04j,  -4.719806427227371197697223509054e-17 -2.485413218098511828702153080849e-16j,  -2.502761929591905504340474701447e-16 -1.124814631485797066132625001460e-16j],
                              [  6.321797058828074631432391466567e-17 -4.864870569417020649525214323557e-17j,  -7.871274696927136753537745862887e-17 -5.527309426525921913545738093319e-18j,  -1.577344036274296067753203365314e-05 -6.601046652916598778473855624327e-04j,  -6.323774034859143237941037085648e-04 -2.202360558276862071303697776514e-04j],
                              [  6.804929810680519886222048169011e-16 -3.000300211521203080063294878009e-17j,  -6.397272103422437078974554641534e-16 -3.379725239948078323998228260248e-16j,  -1.399452126613284131024812079191e-05 +7.440141304462481860668154887151e-04j,   7.028979987555107654742525546965e-04 +2.174146869682534711186450149256e-04j],
                              [  2.404844579272349437693012674799e-03 +3.799948879955776935877587510704e-06j,  -2.222570374956356429457793311144e-03 -9.275083648759397487656985781257e-04j,  -3.330224707052889001717950814840e-06 +1.770503036611882836156434128938e-04j,   1.672660491648350253833521517066e-04 +5.173737268288416279614014281485e-05j],
                              [ -5.050051190440715776983071627626e-04 +1.809543333460438723544333461390e-05j,   4.738944176631483561935864745607e-04 +1.182486676226383084378421250982e-04j,   3.753547536057436245137070365829e-06 +1.570826771358876830335382646098e-04j,   1.504845227172529366355124835763e-04 +5.240876344384217186541871646988e-05j],
                              [ -2.289619798958509222421703332984e-04 +8.204206427045626135829796410359e-06j,   2.148568401348657059494323684490e-04 +5.361222696162834560522705840135e-05j,  -1.459312001706475499761272995869e-05 -6.107092925158513546310401487460e-04j,  -5.850568508181084887570522212741e-04 -2.037558782919075351172666366040e-04j],
                              [ -1.090321573880246490764744926594e-03 -1.722841583741228168140933486863e-06j,   1.007681099297986354601519565222e-03 +4.205188097787489805851057766972e-04j,  -1.294731673768807085329966138909e-05 +6.883398453563775070199182160025e-04j,   6.503004176472729170807585141745e-04 +2.011456313552780210580916975260e-04j],
                              [ -8.183977474031147716568290739758e-04 +5.179331219279301734559339820407e-01j,   1.997581495182473299010439404810e-01 -4.786765942911783144886328500434e-01j,   1.058804620201576202065396614671e-01 +1.991556768824916286153570155193e-03j,   3.094022890701439432170616328222e-02 -1.000292357573684953742088055151e-01j],
                              [ -3.897226606837885225925743881703e-03 -1.087633189067148814510588294979e-01j,  -2.546730134398855760480273602298e-02 +1.020629845772149657534555444727e-01j,   9.393932733237143894999832127723e-02 -2.244714293655299813812220577347e-03j,   3.134173719213980552344978036672e-02 -8.999346774415363514609822459533e-02j],
                              [  1.766945890952930807091258991193e-03 +4.931170773877611296365230941774e-02j,   1.154650422024735938186790207283e-02 -4.627387355415025355087621505845e-02j,   3.652192665671823990081179545086e-01 -8.727046820794949824606767663226e-03j,   1.218510563709042093805123840866e-01 -3.498784717614085160164449916920e-01j],
                              [ -3.710496419150727774594056285196e-04 +2.348233484746420074440464986765e-01j,   9.056744117922420345134781882734e-02 -2.170250095021612479762040948117e-01j,  -4.116442578357683568235358961829e-01 -7.742815740659983111959796531210e-03j,  -1.202900641225637390352432021245e-01 +3.888957389268670739035371752834e-01j],
                              [ -8.810458765724848506986632834526e-04 +5.575807641988246299291631657979e-01j,   2.150495825575471087187651164641e-01 -5.153191598472538492714534186234e-01j,  -5.986308191536442600406473178440e-13 +2.307926614380460428213921867137e-14j,  -2.296798695798646195015776814206e-13 +5.757491620257952541012676113884e-13j],
                              [ -4.195558263599961576484353997785e-03 -1.170891219449489289994303931053e-01j,  -2.741681646576341405130428086068e-02 +1.098758788105475697749469077280e-01j,   1.486177054484025030506811337840e-13 -2.098014894770084529787194398747e-14j,   7.415522753678440794445082098789e-14 -1.477572787053883307547739509995e-13j],
                              [ -3.377399806112216223962602504894e-15 +1.312700327311887826151055693883e-14j,   1.381542947848951027886109041297e-14 -1.094502190020883530710041732494e-14j,   3.947589215893209657615159358102e-01 -9.432907589627729377790288367578e-03j,   1.317066102770202140614941299646e-01 -3.781773330252169995624456078076e-01j],
                              [ -5.509229456384946970767225604048e-16 +1.462941600503610911470741070994e-13j,   7.917702798542359408073411774442e-14 -1.348862158768477746788207466867e-13j,  -4.449388577679595502267773099447e-01 -8.369069957713765744999889761857e-03j,  -1.300193618949983531685177240433e-01 +4.203503937567230064331624816987e-01j],
                              [ -8.183977474034404659894437195078e-04 +5.179331219279590392545742361108e-01j,   1.997581495182774169450112822233e-01 -4.786765942912047933077701600268e-01j,  -1.058804620165356008554269351407e-01 -1.991556768398716412149518362185e-03j,  -3.094022890611861781318125963480e-02 +1.000292357540604887278234969017e-01j],
                              [ -3.897226606838690137618597120195e-03 -1.087633189065545652463029568935e-01j,  -2.546730134391270508609217415597e-02 +1.020629845770669452686973954769e-01j,  -9.393932733247362110162725912232e-02 +2.244714293617457688545524518986e-03j,  -3.134173719215048448116789359119e-02 +8.999346774423767902906234894544e-02j],
                              [ -1.766945890956523202569572461584e-03 -4.931170773877919383254564422714e-02j,  -1.154650422029424201852965126136e-02 +4.627387355415431974270390469428e-02j,   3.652192665713306918284786206641e-01 -8.727046820505920607380367925998e-03j,   1.218510563721236089618216169583e-01 -3.498784717652602682669282785355e-01j],
                              [  3.710496419147905054237990274402e-04 -2.348233484743837973240943028941e-01j,  -9.056744117909154567769292043522e-02 +2.170250095019226332926365330422e-01j,  -4.116442578386864115103094263759e-01 -7.742815740681136330025857716919e-03j,  -1.202900641234206091656488979424e-01 +3.888957389296361366604060094687e-01j]])

    rotor2_evals, rotor2_evects = rotor2._eigen()
    mac1 = MAC_modes(evects_sorted, rotor2_evects[:, :4])
    mac2 = MAC_modes(evects_sorted, rotor2.evectors[:, :4])
    print(rotor2.w)
    print(mac1)
    assert_allclose(mac1.diagonal(), np.ones_like(mac1.diagonal()))
    assert_allclose(mac2.diagonal(), np.ones_like(mac1.diagonal()))


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_evects_not_sorted_rotor2(rotor2):
    evects = np.array([[  4.165e-07 +2.248e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 -2.232e-07j,   4.060e-07 +2.232e-07j],
                       [  2.780e-18 +4.772e-07j,   2.780e-18 -4.772e-07j,   2.687e-18 -4.869e-07j,   2.687e-18 +4.869e-07j],
                       [  8.767e-17 +1.509e-05j,   8.767e-17 -1.509e-05j,   8.476e-17 -1.540e-05j,   8.476e-17 +1.540e-05j],
                       [ -1.317e-05 -7.111e-06j,  -1.317e-05 +7.111e-06j,  -1.284e-05 +7.058e-06j,  -1.284e-05 -7.058e-06j],
                       [  1.395e-08 +7.530e-09j,   1.395e-08 -7.530e-09j,   1.360e-08 -7.474e-09j,   1.360e-08 +7.474e-09j],
                       [  4.612e-20 +1.598e-08j,   4.612e-20 -1.598e-08j,   4.448e-20 -1.631e-08j,   4.448e-20 +1.631e-08j],
                       [  5.150e-19 -4.067e-19j,   5.150e-19 +4.067e-19j,   4.970e-19 +4.284e-19j,   4.970e-19 -4.284e-19j],
                       [  1.513e-19 +7.428e-19j,   1.513e-19 -7.428e-19j,   1.511e-19 -7.555e-19j,   1.511e-19 +7.555e-19j],
                       [  4.165e-07 +2.248e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 -2.232e-07j,   4.060e-07 +2.232e-07j],
                       [ -1.090e-20 +4.772e-07j,  -1.090e-20 -4.772e-07j,  -1.074e-20 -4.869e-07j,  -1.074e-20 +4.869e-07j],
                       [  2.726e-19 -1.509e-05j,   2.726e-19 +1.509e-05j,   2.549e-19 +1.540e-05j,   2.549e-19 -1.540e-05j],
                       [  1.317e-05 +7.111e-06j,   1.317e-05 -7.111e-06j,   1.284e-05 -7.058e-06j,   1.284e-05 +7.058e-06j],
                       [ -7.476e-03 +1.385e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 +1.350e-02j,   7.420e-03 -1.350e-02j],
                       [ -1.587e-02 +9.270e-14j,  -1.587e-02 -9.270e-14j,   1.619e-02 +8.961e-14j,   1.619e-02 -8.961e-14j],
                       [ -5.018e-01 +2.924e-12j,  -5.018e-01 -2.924e-12j,   5.120e-01 +2.826e-12j,   5.120e-01 -2.826e-12j],
                       [  2.364e-01 -4.379e-01j,   2.364e-01 +4.379e-01j,  -2.347e-01 -4.269e-01j,  -2.347e-01 +4.269e-01j],
                       [ -2.504e-04 +4.638e-04j,  -2.504e-04 -4.638e-04j,   2.485e-04 +4.521e-04j,   2.485e-04 -4.521e-04j],
                       [ -5.314e-04 +1.541e-15j,  -5.314e-04 -1.541e-15j,   5.422e-04 +1.489e-15j,   5.422e-04 -1.489e-15j],
                       [  1.351e-14 +1.710e-14j,   1.351e-14 -1.710e-14j,  -1.423e-14 +1.653e-14j,  -1.423e-14 -1.653e-14j],
                       [ -2.464e-14 +5.031e-15j,  -2.464e-14 -5.031e-15j,   2.507e-14 +5.019e-15j,   2.507e-14 -5.019e-15j],
                       [ -7.476e-03 +1.385e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 +1.350e-02j,   7.420e-03 -1.350e-02j],
                       [ -1.587e-02 -9.081e-17j,  -1.587e-02 +9.081e-17j,   1.619e-02 -8.172e-17j,   1.619e-02 +8.172e-17j],
                       [  5.018e-01 +0.000e+00j,   5.018e-01 -0.000e+00j,  -5.120e-01 +0.000e+00j,  -5.120e-01 -0.000e+00j],
                       [ -2.364e-01 +4.379e-01j,  -2.364e-01 -4.379e-01j,   2.347e-01 +4.269e-01j,   2.347e-01 -4.269e-01j]])
    rotor2_evals, rotor2_evects = rotor2._eigen(sorted_=False)
    assert_allclose(rotor2_evects[:, 0:4], evects, rtol=1e-3)


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_kappa_rotor2(rotor2):
    assert_allclose(rotor2.kappa(0, 0)['Frequency'], 34.27731, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Major axes'], 0.002456923, rtol=1e-1)
    assert_allclose(rotor2.kappa(0, 0)['Minor axes'], 8.039315263553689e-06, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['kappa'], -0.00327153425, rtol=1e-3)

    rotor2.w = 2000
    assert_allclose(rotor2.kappa(0, 0)['Frequency'], 25.7839904, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Major axes'], 0.00061657, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Minor axes'], 0.00060573, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['kappa'], -0.98242121, rtol=1e-3)

    assert_allclose(rotor2.kappa(0, 1)['Frequency'], 34.27730466, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['Major axes'], 0.0024574521, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['Minor axes'], 6.890315481064042e-08, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['kappa'], 2.8038451836263183e-05, rtol=1e-3)


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_kappa_mode_rotor2(rotor2):
    assert_allclose(rotor2.kappa_mode(0), [-0.0032715342590611774,
                                           -0.003271534259070017,
                                           -0.003271534259059628], rtol=1e-3)

    assert_allclose(rotor2.kappa_mode(1), [0.01653978084519139,
                                           0.016539780845213483,
                                           0.016539780845234074], rtol=1e-3)


#  TODO implement more tests using a simple rotor with 2 elements and one disk
#  TODO add test for damped case

