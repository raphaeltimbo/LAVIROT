import pytest
from LaviRot.elements import *
from LaviRot.rotor import *
from LaviRot.results import MAC_modes
import numpy as np
from numpy.testing import assert_almost_equal, assert_allclose


@pytest.fixture
def rotor1():
    #  Rotor without damping with 2 shaft elements - no disks and no bearings
    le_ = 0.25
    i_d_ = 0
    o_d_ = 0.05
    E_ = 211e9
    G_ = 81.2e9
    rho_ = 7810

    tim0 = ShaftElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)
    tim1 = ShaftElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)

    shaft_elm = [tim0, tim1]
    return Rotor(shaft_elm, [], [])


def test_index_eigenvalues_rotor1(rotor1):
    evalues = np.array([-3.8 + 68.6j, -3.8 - 68.6j, -1.8 + 30.j, -1.8 - 30.j, -0.7 + 14.4j, -0.7 - 14.4j])
    evalues2 = np.array([0. + 68.7j, 0. - 68.7j, 0. + 30.1j, 0. - 30.1j, -0. + 14.4j, -0. - 14.4j])
    assert_almost_equal([4, 2, 0, 1, 3, 5], rotor1._index(evalues))
    assert_almost_equal([4, 2, 0, 1, 3, 5], rotor1._index(evalues2))


def test_mass_matrix_rotor1(rotor1):
    Mr1 = np.array([[ 1.421,  0.   ,  0.   ,  0.049,  0.496,  0.   ,  0.   , -0.031,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   ,  1.421, -0.049,  0.   ,  0.   ,  0.496,  0.031,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   , -0.049,  0.002,  0.   ,  0.   , -0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.049,  0.   ,  0.   ,  0.002,  0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.496,  0.   ,  0.   ,  0.031,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   , -0.031],
                    [ 0.   ,  0.496, -0.031,  0.   ,  0.   ,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.031,  0.   ],
                    [ 0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.   ,  0.   , -0.031, -0.002,  0.   ],
                    [-0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.031,  0.   ,  0.   , -0.002],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   ,  0.031,  1.421,  0.   ,  0.   , -0.049],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.496, -0.031,  0.   ,  0.   ,  1.421,  0.049,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.049,  0.002,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   , -0.031,  0.   ,  0.   , -0.002, -0.049,  0.   ,  0.   ,  0.002]])

    assert_almost_equal(rotor1.M(), Mr1, decimal=3)


@pytest.fixture
def rotor2():
    #  Rotor without damping with 2 shaft elements 1 disk and 2 bearings
    le_ = 0.25
    i_d_ = 0
    o_d_ = 0.05
    E_ = 211e9
    G_ = 81.2e9
    rho_ = 7810

    tim0 = ShaftElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)
    tim1 = ShaftElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)

    shaft_elm = [tim0, tim1]
    disk0 = DiskElement(1, rho_, 0.07, 0.05, 0.28)
    stf = 1e6
    bearing0 = BearingElement(0, stf, stf, 0, 0)
    bearing1 = BearingElement(2, stf, stf, 0, 0)

    return Rotor(shaft_elm, [disk0], [bearing0, bearing1])


def test_mass_matrix_rotor2(rotor2):
    Mr2 = np.array([[  1.421,   0.   ,   0.   ,   0.049,   0.496,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,   1.421,  -0.049,   0.   ,   0.   ,   0.496,   0.031,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,  -0.049,   0.002,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.049,   0.   ,   0.   ,   0.002,   0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.496,   0.   ,   0.   ,   0.031,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,  -0.031],
                    [  0.   ,   0.496,  -0.031,   0.   ,   0.   ,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.031,   0.   ],
                    [  0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ],
                    [ -0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.031,   0.   ,   0.   ,  -0.002],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,   0.031,   1.421,   0.   ,   0.   ,  -0.049],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.496,  -0.031,   0.   ,   0.   ,   1.421,   0.049,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.049,   0.002,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,  -0.002,  -0.049,   0.   ,   0.   ,   0.002]])
    assert_almost_equal(rotor2.M(), Mr2, decimal=3)


def test_a0_0_matrix_rotor2(rotor2):
    A0_0 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
    assert_almost_equal(rotor2.A()[:12, :12], A0_0, decimal=3)


def test_a0_1_matrix_rotor2(rotor2):
    A0_1 = np.array([[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]])
    assert_almost_equal(rotor2.A()[:12, 12:24], A0_1, decimal=3)


def test_a1_0_matrix_rotor2(rotor2):
    A1_0 = np.array([[  20.63 ,   -0.   ,    0.   ,    4.114,  -20.958,    0.   ,    0.   ,    1.11 ,    0.056,   -0.   ,   -0.   ,   -0.014],
                     [   0.   ,   20.63 ,   -4.114,    0.   ,   -0.   ,  -20.958,   -1.11 ,    0.   ,   -0.   ,    0.056,    0.014,    0.   ],
                     [   0.   ,  697.351, -131.328,    0.   ,   -0.   , -705.253,  -44.535,    0.   ,   -0.   ,    2.079,    0.596,    0.   ],
                     [-697.351,    0.   ,   -0.   , -131.328,  705.253,   -0.   ,   -0.   ,  -44.535,   -2.079,    0.   ,    0.   ,    0.596],
                     [   0.442,    0.   ,   -0.   ,    0.072,   -0.887,   -0.   ,   -0.   ,   -0.   ,    0.442,    0.   ,    0.   ,   -0.072],
                     [   0.   ,    0.442,   -0.072,    0.   ,   -0.   ,   -0.887,    0.   ,    0.   ,    0.   ,    0.442,    0.072,   -0.   ],
                     [   0.   ,    6.457,   -0.837,    0.   ,   -0.   ,    0.   ,   -1.561,    0.   ,   -0.   ,   -6.457,   -0.837,   -0.   ],
                     [  -6.457,   -0.   ,    0.   ,   -0.837,    0.   ,    0.   ,    0.   ,   -1.561,    6.457,    0.   ,    0.   ,   -0.837],
                     [   0.056,   -0.   ,    0.   ,    0.014,  -20.958,    0.   ,    0.   ,   -1.11 ,   20.63 ,    0.   ,    0.   ,   -4.114],
                     [   0.   ,    0.056,   -0.014,    0.   ,   -0.   ,  -20.958,    1.11 ,    0.   ,    0.   ,   20.63 ,    4.114,   -0.   ],
                     [  -0.   ,   -2.079,    0.596,   -0.   ,    0.   ,  705.253,  -44.535,   -0.   ,   -0.   , -697.351, -131.328,    0.   ],
                     [   2.079,    0.   ,   -0.   ,    0.596, -705.253,   -0.   ,    0.   ,  -44.535,  697.351,    0.   ,    0.   , -131.328]])
    assert_almost_equal(rotor2.A()[12:24, :12]/1e7, A1_0, decimal=3)


def test_a1_1_matrix_rotor2(rotor2):
    A1_1 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
    assert_almost_equal(rotor2.A()[12:24, 12:24] / 1e7, A1_1, decimal=3)


def test_evals_sorted_rotor2(rotor2):
    evals_sorted = np.array([ 0.  +215.371j, -0.  +215.371j, -0.  +598.025j,  0.  +598.025j, -0. +3956.225j,
                              0. +3956.225j,  0. +4965.29j , -0. +4965.29j ,  0.+33048.281j, -0.+33048.281j,
                              0.+33249.826j, -0.+33249.826j,  0.-33249.826j, -0.-33249.826j,  0.-33048.281j,
                              -0.-33048.281j,  0. -4965.29j , -0. -4965.29j , -0. -3956.225j,  0. -3956.225j,
                              -0.  -598.025j,  0.  -598.025j,  0.  -215.371j, -0.  -215.371j])

    evals_sorted_w_10000 = np.array([ -5.074e-13   +34.822j,   5.045e-01  +215.369j,  -5.045e-01  +215.369j,
                                      6.025e-12 +3470.898j,   5.372e-12 +3850.213j,   4.176e+01 +3990.229j,
                                      -4.176e+01 +3990.229j,  -1.888e-11+18487.595j,   3.565e-10+31729.443j,
                                      9.136e-10+32081.816j,  -1.262e-09+34446.625j,  -1.799e-10+34689.405j,
                                      -1.799e-10-34689.405j,  -1.262e-09-34446.625j,   9.136e-10-32081.816j,
                                      3.565e-10-31729.443j,  -1.888e-11-18487.595j,   4.176e+01 -3990.229j,
                                      -4.176e+01 -3990.229j,   5.372e-12 -3850.213j,   6.025e-12 -3470.898j,
                                      5.045e-01  -215.369j,  -5.045e-01  -215.369j,  -5.074e-13   -34.822j])

    rotor2_evals, rotor2_evects = rotor2._eigen()
    assert_allclose(rotor2_evals, evals_sorted, rtol=1e-3)
    assert_allclose(rotor2.evalues, evals_sorted, rtol=1e-3)
    rotor2.w = 10000
    assert_allclose(rotor2.evalues, evals_sorted_w_10000, rtol=1e-3)


def test_evals_not_sorted_rotor2(rotor2):
    evals = np.array([ 0.+33249.826j,  0.-33249.826j, -0.+33249.826j, -0.-33249.826j,
                      0.+33048.281j,  0.-33048.281j, -0.+33048.281j, -0.-33048.281j,
                      0. +4965.29j ,  0. -4965.29j , -0. +4965.29j , -0. -4965.29j ,
                      -0. +3956.225j, -0. -3956.225j,  0. +3956.225j,  0. -3956.225j,
                      -0.  +598.025j, -0.  -598.025j,  0.  +598.025j,  0.  -598.025j,
                      0.  +215.371j,  0.  -215.371j, -0.  +215.371j, -0.  -215.371j])
    rotor2_evals, rotor2_evects = rotor2._eigen(sorted_=False)
    assert_almost_equal(rotor2_evals, evals, decimal=3)


def test_evects_sorted_rotor2(rotor2):
    evects_sorted = np.array([[ -8.061e-06 -1.801e-04j,   1.450e-17 -2.367e-03j,  -1.579e-17 +2.133e-04j,  -1.389e-17 -2.048e-04j,  -1.726e-20 +2.507e-05j,   8.122e-06 +1.100e-06j,   1.609e-19 +2.020e-05j,   3.661e-06 +1.222e-05j,  -3.330e-21 -4.913e-07j,  -2.620e-21 +4.910e-07j,   4.165e-07 +2.248e-07j,   4.060e-07 -2.232e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 +2.232e-07j,  -3.330e-21 +4.913e-07j,  -2.620e-21 -4.910e-07j,   1.609e-19 -2.020e-05j,   3.661e-06 -1.222e-05j,  -1.726e-20 -2.507e-05j,   8.122e-06 -1.100e-06j,  -1.579e-17 -2.133e-04j,  -1.389e-17 +2.048e-04j,  -8.061e-06 +1.801e-04j,   1.450e-17 +2.367e-03j],
                              [ -1.365e-17 -2.451e-03j,  -4.219e-05 -6.601e-04j,  -9.990e-05 -2.358e-05j,  -1.077e-04 +4.998e-05j,  -6.035e-06 +1.624e-05j,   3.174e-20 -2.935e-05j,  -2.054e-06 +6.759e-06j,  -3.836e-20 -1.718e-05j,  -3.929e-07 -2.522e-07j,  -3.960e-07 +2.478e-07j,   2.780e-18 +4.772e-07j,   2.687e-18 -4.869e-07j,   2.780e-18 -4.772e-07j,   2.687e-18 +4.869e-07j,  -3.929e-07 +2.522e-07j,  -3.960e-07 -2.478e-07j,  -2.054e-06 -6.759e-06j,  -3.836e-20 +1.718e-05j,  -6.035e-06 -1.624e-05j,   3.174e-20 +2.935e-05j,  -9.990e-05 +2.358e-05j,  -1.077e-04 -4.998e-05j,  -1.365e-17 +2.451e-03j,  -4.219e-05 +6.601e-04j],
                              [ -1.438e-16 +1.111e-03j,   1.913e-05 +2.993e-04j,  -3.884e-04 -9.166e-05j,  -4.189e-04 +1.943e-04j,  -3.487e-05 +9.385e-05j,   2.582e-19 -1.696e-04j,  -1.298e-05 +4.271e-05j,  -2.907e-19 -1.086e-04j,  -1.240e-05 -7.958e-06j,  -1.250e-05 +7.819e-06j,   8.767e-17 +1.509e-05j,   8.476e-17 -1.540e-05j,   8.767e-17 -1.509e-05j,   8.476e-17 +1.540e-05j,  -1.240e-05 +7.958e-06j,  -1.250e-05 -7.819e-06j,  -1.298e-05 -4.271e-05j,  -2.907e-19 +1.086e-04j,  -3.487e-05 -9.385e-05j,   2.582e-19 +1.696e-04j,  -3.884e-04 +9.166e-05j,  -4.189e-04 -1.943e-04j,  -1.438e-16 -1.111e-03j,   1.913e-05 -2.993e-04j],
                              [ -3.655e-06 -8.164e-05j,   1.608e-17 -1.073e-03j,   4.626e-17 -8.294e-04j,   3.593e-17 +7.962e-04j,  -4.156e-20 -1.449e-04j,  -4.694e-05 -6.357e-06j,  -1.035e-18 -1.277e-04j,  -2.314e-05 -7.720e-05j,   2.811e-19 +1.550e-05j,   2.525e-19 -1.549e-05j,  -1.317e-05 -7.111e-06j,  -1.284e-05 +7.058e-06j,  -1.317e-05 +7.111e-06j,  -1.284e-05 -7.058e-06j,   2.811e-19 -1.550e-05j,   2.525e-19 +1.549e-05j,  -1.035e-18 +1.277e-04j,  -2.314e-05 +7.720e-05j,  -4.156e-20 +1.449e-04j,  -4.694e-05 +6.357e-06j,   4.626e-17 +8.294e-04j,   3.593e-17 -7.962e-04j,  -3.655e-06 +8.164e-05j,   1.608e-17 +1.073e-03j],
                              [ -8.678e-06 -1.939e-04j,   1.818e-17 -2.548e-03j,  -4.197e-18 +2.762e-18j,  -4.931e-18 -2.121e-18j,  -2.516e-20 -1.915e-06j,  -6.206e-07 -8.405e-08j,  -1.060e-20 +2.727e-19j,   3.795e-20 +3.596e-20j,  -4.470e-20 -3.096e-20j,  -4.501e-20 +3.052e-20j,   1.395e-08 +7.530e-09j,   1.360e-08 -7.474e-09j,   1.395e-08 -7.530e-09j,   1.360e-08 +7.474e-09j,  -4.470e-20 +3.096e-20j,  -4.501e-20 -3.052e-20j,  -1.060e-20 -2.727e-19j,   3.795e-20 -3.596e-20j,  -2.516e-20 +1.915e-06j,  -6.206e-07 +8.405e-08j,  -4.197e-18 -2.762e-18j,  -4.931e-18 +2.121e-18j,  -8.678e-06 +1.939e-04j,   1.818e-17 +2.548e-03j],
                              [  2.273e-17 -2.638e-03j,  -4.542e-05 -7.107e-04j,  -2.295e-18 -3.520e-18j,  -4.107e-18 +4.415e-18j,   4.611e-07 -1.241e-06j,  -8.960e-21 +2.243e-06j,  -1.006e-21 +1.095e-20j,  -5.160e-22 -5.185e-21j,  -5.599e-20 +2.059e-20j,  -5.600e-20 -2.135e-20j,   4.612e-20 +1.598e-08j,   4.448e-20 -1.631e-08j,   4.612e-20 -1.598e-08j,   4.448e-20 +1.631e-08j,  -5.599e-20 -2.059e-20j,  -5.600e-20 +2.135e-20j,  -1.006e-21 -1.095e-20j,  -5.160e-22 +5.185e-21j,   4.611e-07 +1.241e-06j,  -8.960e-21 -2.243e-06j,  -2.295e-18 +3.520e-18j,  -4.107e-18 -4.415e-18j,   2.273e-17 +2.638e-03j,  -4.542e-05 +7.107e-04j],
                              [ -1.478e-16 +2.364e-15j,   2.018e-16 -2.229e-15j,  -4.198e-04 -9.907e-05j,  -4.528e-04 +2.100e-04j,   2.825e-19 -1.235e-18j,  -9.832e-20 +4.830e-19j,   5.317e-06 -1.750e-05j,   1.766e-19 +4.449e-05j,  -1.455e-07 -9.341e-08j,  -1.467e-07 +9.179e-08j,   5.150e-19 -4.067e-19j,   4.970e-19 +4.284e-19j,   5.150e-19 +4.067e-19j,   4.970e-19 -4.284e-19j,  -1.455e-07 +9.341e-08j,  -1.467e-07 -9.179e-08j,   5.317e-06 +1.750e-05j,   1.766e-19 -4.449e-05j,   2.825e-19 +1.235e-18j,  -9.832e-20 -4.830e-19j,  -4.198e-04 +9.907e-05j,  -4.528e-04 -2.100e-04j,  -1.478e-16 -2.364e-15j,   2.018e-16 +2.229e-15j],
                              [  3.086e-17 -3.100e-16j,   1.099e-17 -1.330e-16j,   4.398e-17 -8.965e-04j,   3.304e-17 +8.606e-04j,   2.395e-19 -1.229e-19j,   2.301e-20 +9.255e-19j,   2.951e-19 +5.230e-05j,   9.479e-06 +3.163e-05j,  -4.778e-19 +1.820e-07j,  -4.818e-19 -1.819e-07j,   1.513e-19 +7.428e-19j,   1.511e-19 -7.555e-19j,   1.513e-19 -7.428e-19j,   1.511e-19 +7.555e-19j,  -4.778e-19 -1.820e-07j,  -4.818e-19 +1.819e-07j,   2.951e-19 -5.230e-05j,   9.479e-06 -3.163e-05j,   2.395e-19 +1.229e-19j,   2.301e-20 -9.255e-19j,   4.398e-17 +8.965e-04j,   3.304e-17 -8.606e-04j,   3.086e-17 +3.100e-16j,   1.099e-17 +1.330e-16j],
                              [ -8.061e-06 -1.801e-04j,   1.918e-17 -2.367e-03j,   6.654e-18 -2.133e-04j,   3.351e-18 +2.048e-04j,  -2.239e-19 +2.507e-05j,   8.122e-06 +1.100e-06j,  -8.948e-20 -2.020e-05j,  -3.661e-06 -1.222e-05j,  -2.638e-18 +4.913e-07j,  -2.659e-18 -4.910e-07j,   4.165e-07 +2.248e-07j,   4.060e-07 -2.232e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 +2.232e-07j,  -2.638e-18 -4.913e-07j,  -2.659e-18 +4.910e-07j,  -8.948e-20 +2.020e-05j,  -3.661e-06 +1.222e-05j,  -2.239e-19 -2.507e-05j,   8.122e-06 -1.100e-06j,   6.654e-18 +2.133e-04j,   3.351e-18 -2.048e-04j,  -8.061e-06 +1.801e-04j,   1.918e-17 +2.367e-03j],
                              [  5.794e-17 -2.451e-03j,  -4.219e-05 -6.601e-04j,   9.990e-05 +2.358e-05j,   1.077e-04 -4.998e-05j,  -6.035e-06 +1.624e-05j,  -5.239e-20 -2.935e-05j,   2.054e-06 -6.759e-06j,   3.434e-20 +1.718e-05j,   3.929e-07 +2.522e-07j,   3.960e-07 -2.478e-07j,  -1.090e-20 +4.772e-07j,  -1.074e-20 -4.869e-07j,  -1.090e-20 -4.772e-07j,  -1.074e-20 +4.869e-07j,   3.929e-07 -2.522e-07j,   3.960e-07 +2.478e-07j,   2.054e-06 +6.759e-06j,   3.434e-20 -1.718e-05j,  -6.035e-06 -1.624e-05j,  -5.239e-20 +2.935e-05j,   9.990e-05 -2.358e-05j,   1.077e-04 +4.998e-05j,   5.794e-17 +2.451e-03j,  -4.219e-05 +6.601e-04j],
                              [ -1.358e-16 -1.111e-03j,  -1.913e-05 -2.993e-04j,  -3.884e-04 -9.166e-05j,  -4.189e-04 +1.943e-04j,   3.487e-05 -9.385e-05j,   2.603e-19 +1.696e-04j,  -1.298e-05 +4.271e-05j,  -1.929e-19 -1.086e-04j,  -1.240e-05 -7.958e-06j,  -1.250e-05 +7.819e-06j,   2.726e-19 -1.509e-05j,   2.549e-19 +1.540e-05j,   2.726e-19 +1.509e-05j,   2.549e-19 -1.540e-05j,  -1.240e-05 +7.958e-06j,  -1.250e-05 -7.819e-06j,  -1.298e-05 -4.271e-05j,  -1.929e-19 +1.086e-04j,   3.487e-05 +9.385e-05j,   2.603e-19 -1.696e-04j,  -3.884e-04 +9.166e-05j,  -4.189e-04 -1.943e-04j,  -1.358e-16 +1.111e-03j,  -1.913e-05 +2.993e-04j],
                              [  3.655e-06 +8.164e-05j,   1.163e-18 +1.073e-03j,   4.245e-17 -8.294e-04j,   3.255e-17 +7.962e-04j,  -1.140e-18 +1.449e-04j,   4.694e-05 +6.357e-06j,  -5.404e-19 -1.277e-04j,  -2.314e-05 -7.720e-05j,  -8.345e-17 +1.550e-05j,  -8.412e-17 -1.549e-05j,   1.317e-05 +7.111e-06j,   1.284e-05 -7.058e-06j,   1.317e-05 -7.111e-06j,   1.284e-05 +7.058e-06j,  -8.345e-17 -1.550e-05j,  -8.412e-17 +1.549e-05j,  -5.404e-19 +1.277e-04j,  -2.314e-05 +7.720e-05j,  -1.140e-18 -1.449e-04j,   4.694e-05 -6.357e-06j,   4.245e-17 +8.294e-04j,   3.255e-17 -7.962e-04j,   3.655e-06 -8.164e-05j,   1.163e-18 -1.073e-03j],
                              [  3.878e-02 -1.736e-03j,   5.097e-01 -2.103e-15j,  -1.276e-01 -3.067e-15j,   1.225e-01 -3.626e-15j,  -9.919e-02 +7.795e-17j,  -4.352e-03 +3.213e-02j,  -1.003e-01 +7.960e-16j,  -6.065e-02 +1.818e-02j,   1.624e-02 +2.318e-16j,  -1.623e-02 +2.325e-16j,  -7.476e-03 +1.385e-02j,   7.420e-03 +1.350e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 -1.350e-02j,   1.624e-02 -2.318e-16j,  -1.623e-02 -2.325e-16j,  -1.003e-01 -7.960e-16j,  -6.065e-02 -1.818e-02j,  -9.919e-02 -7.795e-17j,  -4.352e-03 -3.213e-02j,  -1.276e-01 +3.067e-15j,   1.225e-01 +3.626e-15j,   3.878e-02 +1.736e-03j,   5.097e-01 +2.103e-15j],
                              [  5.278e-01 -2.781e-14j,   1.422e-01 -9.087e-03j,   1.410e-02 -5.974e-02j,  -2.989e-02 -6.443e-02j,  -6.425e-02 -2.387e-02j,   1.161e-01 +1.014e-16j,  -3.356e-02 -1.020e-02j,   8.533e-02 -2.038e-16j,   8.335e-03 -1.299e-02j,  -8.190e-03 -1.309e-02j,  -1.587e-02 +9.270e-14j,   1.619e-02 +8.961e-14j,  -1.587e-02 -9.270e-14j,   1.619e-02 -8.961e-14j,   8.335e-03 +1.299e-02j,  -8.190e-03 +1.309e-02j,  -3.356e-02 +1.020e-02j,   8.533e-02 +2.038e-16j,  -6.425e-02 +2.387e-02j,   1.161e-01 -1.014e-16j,   1.410e-02 +5.974e-02j,  -2.989e-02 +6.443e-02j,   5.278e-01 +2.781e-14j,   1.422e-01 +9.087e-03j],
                              [ -2.393e-01 -2.880e-13j,  -6.446e-02 +4.120e-03j,   5.481e-02 -2.323e-01j,  -1.162e-01 -2.505e-01j,  -3.713e-01 -1.380e-01j,   6.710e-01 +0.000e+00j,  -2.121e-01 -6.444e-02j,   5.392e-01 +0.000e+00j,   2.630e-01 -4.097e-01j,  -2.584e-01 -4.130e-01j,  -5.018e-01 +2.924e-12j,   5.120e-01 +2.826e-12j,  -5.018e-01 -2.924e-12j,   5.120e-01 -2.826e-12j,   2.630e-01 +4.097e-01j,  -2.584e-01 +4.130e-01j,  -2.121e-01 +6.444e-02j,   5.392e-01 -0.000e+00j,  -3.713e-01 +1.380e-01j,   6.710e-01 -0.000e+00j,   5.481e-02 +2.323e-01j,  -1.162e-01 +2.505e-01j,  -2.393e-01 +2.880e-13j,  -6.446e-02 -4.120e-03j],
                              [  1.758e-02 -7.871e-04j,   2.311e-01 -9.561e-14j,   4.960e-01 +8.773e-15j,  -4.762e-01 +3.333e-15j,   5.732e-01 +0.000e+00j,   2.515e-02 -1.857e-01j,   6.338e-01 -3.576e-15j,   3.833e-01 -1.149e-01j,  -5.123e-01 +0.000e+00j,   5.120e-01 +0.000e+00j,   2.364e-01 -4.379e-01j,  -2.347e-01 -4.269e-01j,   2.364e-01 +4.379e-01j,  -2.347e-01 +4.269e-01j,  -5.123e-01 -0.000e+00j,   5.120e-01 -0.000e+00j,   6.338e-01 +3.576e-15j,   3.833e-01 +1.149e-01j,   5.732e-01 -0.000e+00j,   2.515e-02 +1.857e-01j,   4.960e-01 -8.773e-15j,  -4.762e-01 -3.333e-15j,   1.758e-02 +7.871e-04j,   2.311e-01 +9.561e-14j],
                              [  4.175e-02 -1.869e-03j,   5.487e-01 +0.000e+00j,  -1.590e-15 -2.518e-15j,   1.358e-15 -2.958e-15j,   7.578e-03 -9.545e-17j,   3.325e-04 -2.455e-03j,  -1.360e-15 -6.237e-17j,  -1.622e-16 +2.098e-16j,   1.029e-15 -1.482e-15j,  -1.014e-15 -1.493e-15j,  -2.504e-04 +4.638e-04j,   2.485e-04 +4.521e-04j,  -2.504e-04 -4.638e-04j,   2.485e-04 -4.521e-04j,   1.029e-15 +1.482e-15j,  -1.014e-15 +1.493e-15j,  -1.360e-15 +6.237e-17j,  -1.622e-16 -2.098e-16j,   7.578e-03 +9.545e-17j,   3.325e-04 +2.455e-03j,  -1.590e-15 +2.518e-15j,   1.358e-15 +2.958e-15j,   4.175e-02 +1.869e-03j,   5.487e-01 -0.000e+00j],
                              [  5.682e-01 +0.000e+00j,   1.531e-01 -9.782e-03j,   2.131e-15 -1.765e-15j,  -2.606e-15 -2.076e-15j,   4.909e-03 +1.824e-03j,  -8.872e-03 -1.220e-17j,  -4.994e-17 -2.665e-17j,   1.852e-17 -2.623e-18j,  -6.804e-16 -1.854e-15j,   7.056e-16 -1.848e-15j,  -5.314e-04 +1.541e-15j,   5.422e-04 +1.489e-15j,  -5.314e-04 -1.541e-15j,   5.422e-04 -1.489e-15j,  -6.804e-16 +1.854e-15j,   7.056e-16 +1.848e-15j,  -4.994e-17 +2.665e-17j,   1.852e-17 +2.623e-18j,   4.909e-03 -1.824e-03j,  -8.872e-03 +1.220e-17j,   2.131e-15 +1.765e-15j,  -2.606e-15 +2.076e-15j,   5.682e-01 -0.000e+00j,   1.531e-01 +9.782e-03j],
                              [ -5.093e-13 -6.765e-14j,   4.739e-13 +1.472e-14j,   5.925e-02 -2.511e-01j,  -1.256e-01 -2.708e-01j,   4.820e-15 +1.195e-15j,  -1.771e-15 -5.885e-16j,   8.688e-02 +2.640e-02j,  -2.209e-01 +5.346e-16j,   3.087e-03 -4.809e-03j,  -3.033e-03 -4.847e-03j,   1.351e-14 +1.710e-14j,  -1.423e-14 +1.653e-14j,   1.351e-14 -1.710e-14j,  -1.423e-14 -1.653e-14j,   3.087e-03 +4.809e-03j,  -3.033e-03 +4.847e-03j,   8.688e-02 -2.640e-02j,  -2.209e-01 -5.346e-16j,   4.820e-15 -1.195e-15j,  -1.771e-15 +5.885e-16j,   5.925e-02 +2.511e-01j,  -1.256e-01 +2.708e-01j,  -5.093e-13 +6.765e-14j,   4.739e-13 -1.472e-14j],
                              [  6.640e-14 +3.051e-14j,   2.837e-14 +2.398e-14j,   5.361e-01 +0.000e+00j,  -5.147e-01 +0.000e+00j,   5.736e-16 +9.705e-16j,  -3.760e-15 +2.093e-17j,  -2.597e-01 +1.482e-15j,  -1.570e-01 +4.707e-02j,  -6.013e-03 -1.590e-14j,   6.010e-03 -1.604e-14j,  -2.464e-14 +5.031e-15j,   2.507e-14 +5.019e-15j,  -2.464e-14 -5.031e-15j,   2.507e-14 -5.019e-15j,  -6.013e-03 +1.590e-14j,   6.010e-03 +1.604e-14j,  -2.597e-01 -1.482e-15j,  -1.570e-01 -4.707e-02j,   5.736e-16 -9.705e-16j,  -3.760e-15 -2.093e-17j,   5.361e-01 -0.000e+00j,  -5.147e-01 -0.000e+00j,   6.640e-14 -3.051e-14j,   2.837e-14 -2.398e-14j],
                              [  3.878e-02 -1.736e-03j,   5.097e-01 -9.066e-15j,   1.276e-01 -2.550e-15j,  -1.225e-01 -2.270e-15j,  -9.919e-02 -8.246e-16j,  -4.352e-03 +3.213e-02j,   1.003e-01 -4.252e-16j,   6.065e-02 -1.818e-02j,  -1.624e-02 -8.741e-14j,   1.623e-02 -8.810e-14j,  -7.476e-03 +1.385e-02j,   7.420e-03 +1.350e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 -1.350e-02j,  -1.624e-02 +8.741e-14j,   1.623e-02 +8.810e-14j,   1.003e-01 +4.252e-16j,   6.065e-02 +1.818e-02j,  -9.919e-02 +8.246e-16j,  -4.352e-03 -3.213e-02j,   1.276e-01 +2.550e-15j,  -1.225e-01 +2.270e-15j,   3.878e-02 +1.736e-03j,   5.097e-01 +9.066e-15j],
                              [  5.278e-01 -1.246e-14j,   1.422e-01 -9.087e-03j,  -1.410e-02 +5.974e-02j,   2.989e-02 +6.443e-02j,  -6.425e-02 -2.387e-02j,   1.161e-01 -1.140e-16j,   3.356e-02 +1.020e-02j,  -8.533e-02 +1.244e-16j,  -8.335e-03 +1.299e-02j,   8.190e-03 +1.309e-02j,  -1.587e-02 -9.081e-17j,   1.619e-02 -8.172e-17j,  -1.587e-02 +9.081e-17j,   1.619e-02 +8.172e-17j,  -8.335e-03 -1.299e-02j,   8.190e-03 -1.309e-02j,   3.356e-02 -1.020e-02j,  -8.533e-02 -1.244e-16j,  -6.425e-02 +2.387e-02j,   1.161e-01 +1.140e-16j,  -1.410e-02 -5.974e-02j,   2.989e-02 -6.443e-02j,   5.278e-01 +1.246e-14j,   1.422e-01 +9.087e-03j],
                              [  2.393e-01 +3.991e-13j,   6.446e-02 -4.120e-03j,   5.481e-02 -2.323e-01j,  -1.162e-01 -2.505e-01j,   3.713e-01 +1.380e-01j,  -6.710e-01 +3.266e-15j,  -2.121e-01 -6.444e-02j,   5.392e-01 +1.636e-15j,   2.630e-01 -4.097e-01j,  -2.584e-01 -4.130e-01j,   5.018e-01 +0.000e+00j,  -5.120e-01 +0.000e+00j,   5.018e-01 -0.000e+00j,  -5.120e-01 -0.000e+00j,   2.630e-01 +4.097e-01j,  -2.584e-01 +4.130e-01j,  -2.121e-01 +6.444e-02j,   5.392e-01 -1.636e-15j,   3.713e-01 -1.380e-01j,  -6.710e-01 -3.266e-15j,   5.481e-02 +2.323e-01j,  -1.162e-01 +2.505e-01j,   2.393e-01 -3.991e-13j,   6.446e-02 +4.120e-03j],
                              [ -1.758e-02 +7.871e-04j,  -2.311e-01 +5.659e-14j,   4.960e-01 +8.246e-15j,  -4.762e-01 -2.626e-15j,  -5.732e-01 -1.747e-15j,  -2.515e-02 +1.857e-01j,   6.338e-01 +0.000e+00j,   3.833e-01 -1.149e-01j,  -5.123e-01 -2.767e-12j,   5.120e-01 -2.788e-12j,  -2.364e-01 +4.379e-01j,   2.347e-01 +4.269e-01j,  -2.364e-01 -4.379e-01j,   2.347e-01 -4.269e-01j,  -5.123e-01 +2.767e-12j,   5.120e-01 +2.788e-12j,   6.338e-01 -0.000e+00j,   3.833e-01 +1.149e-01j,  -5.732e-01 +1.747e-15j,  -2.515e-02 -1.857e-01j,   4.960e-01 -8.246e-15j,  -4.762e-01 +2.626e-15j,  -1.758e-02 -7.871e-04j,  -2.311e-01 -5.659e-14j]])

    rotor2_evals, rotor2_evects = rotor2._eigen()
    mac1 = MAC_modes(evects_sorted, rotor2_evects)
    mac2 = MAC_modes(evects_sorted, rotor2.evectors)
    print(mac1)
    assert_allclose(mac1.diagonal(), np.ones_like(mac1.diagonal()))
    assert_allclose(mac2.diagonal(), np.ones_like(mac1.diagonal()))


def test_evects_not_sorted_rotor2(rotor2):
    evects = np.array([[  4.165e-07 +2.248e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 -2.232e-07j,   4.060e-07 +2.232e-07j],
                       [  2.780e-18 +4.772e-07j,   2.780e-18 -4.772e-07j,   2.687e-18 -4.869e-07j,   2.687e-18 +4.869e-07j],
                       [  8.767e-17 +1.509e-05j,   8.767e-17 -1.509e-05j,   8.476e-17 -1.540e-05j,   8.476e-17 +1.540e-05j],
                       [ -1.317e-05 -7.111e-06j,  -1.317e-05 +7.111e-06j,  -1.284e-05 +7.058e-06j,  -1.284e-05 -7.058e-06j],
                       [  1.395e-08 +7.530e-09j,   1.395e-08 -7.530e-09j,   1.360e-08 -7.474e-09j,   1.360e-08 +7.474e-09j],
                       [  4.612e-20 +1.598e-08j,   4.612e-20 -1.598e-08j,   4.448e-20 -1.631e-08j,   4.448e-20 +1.631e-08j],
                       [  5.150e-19 -4.067e-19j,   5.150e-19 +4.067e-19j,   4.970e-19 +4.284e-19j,   4.970e-19 -4.284e-19j],
                       [  1.513e-19 +7.428e-19j,   1.513e-19 -7.428e-19j,   1.511e-19 -7.555e-19j,   1.511e-19 +7.555e-19j],
                       [  4.165e-07 +2.248e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 -2.232e-07j,   4.060e-07 +2.232e-07j],
                       [ -1.090e-20 +4.772e-07j,  -1.090e-20 -4.772e-07j,  -1.074e-20 -4.869e-07j,  -1.074e-20 +4.869e-07j],
                       [  2.726e-19 -1.509e-05j,   2.726e-19 +1.509e-05j,   2.549e-19 +1.540e-05j,   2.549e-19 -1.540e-05j],
                       [  1.317e-05 +7.111e-06j,   1.317e-05 -7.111e-06j,   1.284e-05 -7.058e-06j,   1.284e-05 +7.058e-06j],
                       [ -7.476e-03 +1.385e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 +1.350e-02j,   7.420e-03 -1.350e-02j],
                       [ -1.587e-02 +9.270e-14j,  -1.587e-02 -9.270e-14j,   1.619e-02 +8.961e-14j,   1.619e-02 -8.961e-14j],
                       [ -5.018e-01 +2.924e-12j,  -5.018e-01 -2.924e-12j,   5.120e-01 +2.826e-12j,   5.120e-01 -2.826e-12j],
                       [  2.364e-01 -4.379e-01j,   2.364e-01 +4.379e-01j,  -2.347e-01 -4.269e-01j,  -2.347e-01 +4.269e-01j],
                       [ -2.504e-04 +4.638e-04j,  -2.504e-04 -4.638e-04j,   2.485e-04 +4.521e-04j,   2.485e-04 -4.521e-04j],
                       [ -5.314e-04 +1.541e-15j,  -5.314e-04 -1.541e-15j,   5.422e-04 +1.489e-15j,   5.422e-04 -1.489e-15j],
                       [  1.351e-14 +1.710e-14j,   1.351e-14 -1.710e-14j,  -1.423e-14 +1.653e-14j,  -1.423e-14 -1.653e-14j],
                       [ -2.464e-14 +5.031e-15j,  -2.464e-14 -5.031e-15j,   2.507e-14 +5.019e-15j,   2.507e-14 -5.019e-15j],
                       [ -7.476e-03 +1.385e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 +1.350e-02j,   7.420e-03 -1.350e-02j],
                       [ -1.587e-02 -9.081e-17j,  -1.587e-02 +9.081e-17j,   1.619e-02 -8.172e-17j,   1.619e-02 +8.172e-17j],
                       [  5.018e-01 +0.000e+00j,   5.018e-01 -0.000e+00j,  -5.120e-01 +0.000e+00j,  -5.120e-01 -0.000e+00j],
                       [ -2.364e-01 +4.379e-01j,  -2.364e-01 -4.379e-01j,   2.347e-01 +4.269e-01j,   2.347e-01 -4.269e-01j]])
    rotor2_evals, rotor2_evects = rotor2._eigen(sorted_=False)
    assert_allclose(rotor2_evects[:, 0:4], evects, rtol=1e-3)

def test_kappa_rotor2(rotor2):
    assert_allclose(rotor2.kappa(0, 0)['Frequency'], 34.27731, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Major axes'], 0.002456923, rtol=1e-1)
    assert_allclose(rotor2.kappa(0, 0)['Minor axes'], 8.039315263553689e-06, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['kappa'], -0.00327153425, rtol=1e-3)

    rotor2.w = 2000
    assert_allclose(rotor2.kappa(0, 0)['Frequency'], 25.7839904, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Major axes'], 0.00061657, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Minor axes'], 0.00060573, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['kappa'], -0.98242121, rtol=1e-3)

    assert_allclose(rotor2.kappa(0, 1)['Frequency'], 34.27730466, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['Major axes'], 0.0024574521, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['Minor axes'], 6.890315481064042e-08, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['kappa'], 2.8038451836263183e-05, rtol=1e-3)

def test_kappa_mode_rotor2(rotor2):
    assert_allclose(rotor2.kappa_mode(0), [-0.0032715342590611774,
                                           -0.003271534259070017,
                                           -0.003271534259059628], rtol=1e-3)

    assert_allclose(rotor2.kappa_mode(1), [0.01653978084519139,
                                           0.016539780845213483,
                                           0.016539780845234074], rtol=1e-3)






#  TODO implement more tests using a simple rotor with 2 elements and one disk
#  TODO add test for damped case

