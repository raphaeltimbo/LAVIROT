import pytest
from LaviRot.elements import *
from LaviRot.rotor import *
from LaviRot.results import MAC_modes
import numpy as np
from numpy.testing import assert_almost_equal, assert_allclose


@pytest.fixture
def rotor1():
    #  Rotor without damping with 2 shaft elements - no disks and no bearings
    le_ = 0.25
    i_d_ = 0
    o_d_ = 0.05
    E_ = 211e9
    G_ = 81.2e9
    rho_ = 7810

    tim0 = ShaftElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)
    tim1 = ShaftElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)

    shaft_elm = [tim0, tim1]
    return Rotor(shaft_elm, [], [])


def test_index_eigenvalues_rotor1(rotor1):
    evalues = np.array([-3.8 + 68.6j, -3.8 - 68.6j, -1.8 + 30.j, -1.8 - 30.j, -0.7 + 14.4j, -0.7 - 14.4j])
    evalues2 = np.array([0. + 68.7j, 0. - 68.7j, 0. + 30.1j, 0. - 30.1j, -0. + 14.4j, -0. - 14.4j])
    assert_almost_equal([4, 2, 0, 1, 3, 5], rotor1._index(evalues))
    assert_almost_equal([4, 2, 0, 1, 3, 5], rotor1._index(evalues2))


def test_mass_matrix_rotor1(rotor1):
    Mr1 = np.array([[ 1.421,  0.   ,  0.   ,  0.049,  0.496,  0.   ,  0.   , -0.031,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   ,  1.421, -0.049,  0.   ,  0.   ,  0.496,  0.031,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   , -0.049,  0.002,  0.   ,  0.   , -0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.049,  0.   ,  0.   ,  0.002,  0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.496,  0.   ,  0.   ,  0.031,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   , -0.031],
                    [ 0.   ,  0.496, -0.031,  0.   ,  0.   ,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.031,  0.   ],
                    [ 0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.   ,  0.   , -0.031, -0.002,  0.   ],
                    [-0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.031,  0.   ,  0.   , -0.002],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   ,  0.031,  1.421,  0.   ,  0.   , -0.049],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.496, -0.031,  0.   ,  0.   ,  1.421,  0.049,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.049,  0.002,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   , -0.031,  0.   ,  0.   , -0.002, -0.049,  0.   ,  0.   ,  0.002]])

    assert_almost_equal(rotor1.M(), Mr1, decimal=3)


@pytest.fixture
def rotor2():
    #  Rotor without damping with 2 shaft elements 1 disk and 2 bearings
    le_ = 0.25
    i_d_ = 0
    o_d_ = 0.05
    E_ = 211e9
    G_ = 81.2e9
    rho_ = 7810

    tim0 = ShaftElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)
    tim1 = ShaftElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)

    shaft_elm = [tim0, tim1]
    disk0 = DiskElement(1, rho_, 0.07, 0.05, 0.28)
    stf = 1e6
    bearing0 = BearingElement(0, stf, stf, 0, 0)
    bearing1 = BearingElement(2, stf, stf, 0, 0)

    return Rotor(shaft_elm, [disk0], [bearing0, bearing1])


def test_mass_matrix_rotor2(rotor2):
    Mr2 = np.array([[  1.421,   0.   ,   0.   ,   0.049,   0.496,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,   1.421,  -0.049,   0.   ,   0.   ,   0.496,   0.031,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,  -0.049,   0.002,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.049,   0.   ,   0.   ,   0.002,   0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.496,   0.   ,   0.   ,   0.031,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,  -0.031],
                    [  0.   ,   0.496,  -0.031,   0.   ,   0.   ,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.031,   0.   ],
                    [  0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ],
                    [ -0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.031,   0.   ,   0.   ,  -0.002],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,   0.031,   1.421,   0.   ,   0.   ,  -0.049],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.496,  -0.031,   0.   ,   0.   ,   1.421,   0.049,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.049,   0.002,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,  -0.002,  -0.049,   0.   ,   0.   ,   0.002]])
    assert_almost_equal(rotor2.M(), Mr2, decimal=3)


def test_a0_0_matrix_rotor2(rotor2):
    A0_0 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
    assert_almost_equal(rotor2.A()[:12, :12], A0_0, decimal=3)


def test_a0_1_matrix_rotor2(rotor2):
    A0_1 = np.array([[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]])
    assert_almost_equal(rotor2.A()[:12, 12:24], A0_1, decimal=3)


def test_a1_0_matrix_rotor2(rotor2):
    A1_0 = np.array([[  20.63 ,   -0.   ,    0.   ,    4.114,  -20.958,    0.   ,    0.   ,    1.11 ,    0.056,   -0.   ,   -0.   ,   -0.014],
                     [   0.   ,   20.63 ,   -4.114,    0.   ,   -0.   ,  -20.958,   -1.11 ,    0.   ,   -0.   ,    0.056,    0.014,    0.   ],
                     [   0.   ,  697.351, -131.328,    0.   ,   -0.   , -705.253,  -44.535,    0.   ,   -0.   ,    2.079,    0.596,    0.   ],
                     [-697.351,    0.   ,   -0.   , -131.328,  705.253,   -0.   ,   -0.   ,  -44.535,   -2.079,    0.   ,    0.   ,    0.596],
                     [   0.442,    0.   ,   -0.   ,    0.072,   -0.887,   -0.   ,   -0.   ,   -0.   ,    0.442,    0.   ,    0.   ,   -0.072],
                     [   0.   ,    0.442,   -0.072,    0.   ,   -0.   ,   -0.887,    0.   ,    0.   ,    0.   ,    0.442,    0.072,   -0.   ],
                     [   0.   ,    6.457,   -0.837,    0.   ,   -0.   ,    0.   ,   -1.561,    0.   ,   -0.   ,   -6.457,   -0.837,   -0.   ],
                     [  -6.457,   -0.   ,    0.   ,   -0.837,    0.   ,    0.   ,    0.   ,   -1.561,    6.457,    0.   ,    0.   ,   -0.837],
                     [   0.056,   -0.   ,    0.   ,    0.014,  -20.958,    0.   ,    0.   ,   -1.11 ,   20.63 ,    0.   ,    0.   ,   -4.114],
                     [   0.   ,    0.056,   -0.014,    0.   ,   -0.   ,  -20.958,    1.11 ,    0.   ,    0.   ,   20.63 ,    4.114,   -0.   ],
                     [  -0.   ,   -2.079,    0.596,   -0.   ,    0.   ,  705.253,  -44.535,   -0.   ,   -0.   , -697.351, -131.328,    0.   ],
                     [   2.079,    0.   ,   -0.   ,    0.596, -705.253,   -0.   ,    0.   ,  -44.535,  697.351,    0.   ,    0.   , -131.328]])
    assert_almost_equal(rotor2.A()[12:24, :12]/1e7, A1_0, decimal=3)


def test_a1_1_matrix_rotor2(rotor2):
    A1_1 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
    assert_almost_equal(rotor2.A()[12:24, 12:24] / 1e7, A1_1, decimal=3)


def test_evals_sorted_rotor2(rotor2):
    evals_sorted = np.array([  1.4667459679e-12 +215.3707255735j,   3.9623200168e-12 +215.3707255733j,
                               7.4569772223e-11 +598.0247411492j,   1.1024641658e-11 +598.0247411456j,
                               4.3188161105e-09+3956.2249777612j,   2.5852376472e-11+3956.2249797838j,
                               4.3188161105e-09-3956.2249777612j,   2.5852376472e-11-3956.2249797838j,
                               7.4569772223e-11 -598.0247411492j,   1.1024641658e-11 -598.0247411456j,
                               1.4667459679e-12 -215.3707255735j,   3.9623200168e-12 -215.3707255733j])

    evals_sorted_w_10000 = np.array([  8.3087982977e-14  +34.8221380094j,   5.0452453663e-01 +215.3690114321j,
                                       -5.0452453663e-01 +215.3690114322j,  -7.1409152053e-07+3470.8976161552j,
                                       6.9042014718e-07+3850.2126301237j,   4.1762911393e+01+3990.2290333015j,
                                       4.1762911393e+01-3990.2290333015j,   6.9042014718e-07-3850.2126301237j,
                                       -7.1409152053e-07-3470.8976161552j,   5.0452453663e-01 -215.3690114321j,
                                       -5.0452453663e-01 -215.3690114322j,   8.3087982977e-14  -34.8221380094j])

    rotor2_evals, rotor2_evects = rotor2._eigen()
    assert_allclose(rotor2_evals, evals_sorted, rtol=1e-3)
    assert_allclose(rotor2.evalues, evals_sorted, rtol=1e-3)
    rotor2.w = 10000
    assert_allclose(rotor2.evalues, evals_sorted_w_10000, rtol=1e-3)


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_evals_not_sorted_rotor2(rotor2):
    evals = np.array([ 0.+33249.826j,  0.-33249.826j, -0.+33249.826j, -0.-33249.826j,
                      0.+33048.281j,  0.-33048.281j, -0.+33048.281j, -0.-33048.281j,
                      0. +4965.29j ,  0. -4965.29j , -0. +4965.29j , -0. -4965.29j ,
                      -0. +3956.225j, -0. -3956.225j,  0. +3956.225j,  0. -3956.225j,
                      -0.  +598.025j, -0.  -598.025j,  0.  +598.025j,  0.  -598.025j,
                      0.  +215.371j,  0.  -215.371j, -0.  +215.371j, -0.  -215.371j])
    rotor2_evals, rotor2_evects = rotor2._eigen(sorted_=False)
    assert_almost_equal(rotor2_evals, evals, decimal=3)


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_evects_sorted_rotor2(rotor2):
    evects_sorted = np.array([[ -8.0609870120e-06 -1.8006985680e-04j,   1.4496260149e-17 -2.3666623894e-03j,  -1.5788886483e-17 +2.1333186036e-04j,  -1.3887487423e-17 -2.0479486311e-04j,  -1.7260268386e-20 +2.5070888594e-05j,   8.1222970461e-06 +1.1000545868e-06j,   1.6093309960e-19 +2.0200223658e-05j,   3.6614153035e-06 +1.2215772622e-05j,  -3.3301281671e-21 -4.9130929780e-07j,  -2.6198652803e-21 +4.9103613471e-07j,   4.1646816095e-07 +2.2483542875e-07j,   4.0601697062e-07 -2.2316123461e-07j,   4.1646816095e-07 -2.2483542875e-07j,   4.0601697062e-07 +2.2316123461e-07j,  -3.3301281671e-21 +4.9130929780e-07j,  -2.6198652803e-21 -4.9103613471e-07j,   1.6093309960e-19 -2.0200223658e-05j,   3.6614153035e-06 -1.2215772622e-05j,  -1.7260268386e-20 -2.5070888594e-05j,   8.1222970461e-06 -1.1000545868e-06j,  -1.5788886483e-17 -2.1333186036e-04j,  -1.3887487423e-17 +2.0479486311e-04j,  -8.0609870120e-06 +1.8006985680e-04j,   1.4496260149e-17 +2.3666623894e-03j],
                               [ -1.3648151312e-17 -2.4507466969e-03j,  -4.2190480691e-05 -6.6013529126e-04j,  -9.9903245637e-05 -2.3575747414e-05j,  -1.0774266136e-04 +4.9975393624e-05j,  -6.0347207795e-06 +1.6240710374e-05j,   3.1740787380e-20 -2.9352106463e-05j,  -2.0536953107e-06 +6.7587972903e-06j,  -3.8359638850e-20 -1.7184789155e-05j,  -3.9291794930e-07 -2.5221809421e-07j,  -3.9603728858e-07 +2.4783318684e-07j,   2.7796916885e-18 +4.7721979433e-07j,   2.6868611377e-18 -4.8691345653e-07j,   2.7796916885e-18 -4.7721979433e-07j,   2.6868611377e-18 +4.8691345653e-07j,  -3.9291794930e-07 +2.5221809421e-07j,  -3.9603728858e-07 -2.4783318684e-07j,  -2.0536953107e-06 -6.7587972903e-06j,  -3.8359638850e-20 +1.7184789155e-05j,  -6.0347207795e-06 -1.6240710374e-05j,   3.1740787380e-20 +2.9352106463e-05j,  -9.9903245637e-05 +2.3575747414e-05j,  -1.0774266136e-04 -4.9975393624e-05j,  -1.3648151312e-17 +2.4507466969e-03j,  -4.2190480691e-05 +6.6013529126e-04j],
                               [ -1.4380543662e-16 +1.1111329267e-03j,   1.9128550637e-05 +2.9929574491e-04j,  -3.8840591193e-04 -9.1658280124e-05j,  -4.1888415509e-04 +1.9429537260e-04j,  -3.4873165674e-05 +9.3851066888e-05j,   2.5822701546e-19 -1.6961859694e-04j,  -1.2978086268e-05 +4.2711425518e-05j,  -2.9071545277e-19 -1.0859725636e-04j,  -1.2397023339e-05 -7.9577774594e-06j,  -1.2495442161e-05 +7.8194284756e-06j,   8.7669846643e-17 +1.5092280594e-05j,   8.4757783190e-17 -1.5398846817e-05j,   8.7669846643e-17 -1.5092280594e-05j,   8.4757783190e-17 +1.5398846817e-05j,  -1.2397023339e-05 +7.9577774594e-06j,  -1.2495442161e-05 -7.8194284756e-06j,  -1.2978086268e-05 -4.2711425518e-05j,  -2.9071545277e-19 +1.0859725636e-04j,  -3.4873165674e-05 -9.3851066888e-05j,   2.5822701546e-19 +1.6961859694e-04j,  -3.8840591193e-04 +9.1658280124e-05j,  -4.1888415509e-04 -1.9429537260e-04j,  -1.4380543662e-16 -1.1111329267e-03j,   1.9128550637e-05 -2.9929574491e-04j],
                               [ -3.6547343315e-06 -8.1641055461e-05j,   1.6077893929e-17 -1.0730103240e-03j,   4.6263427324e-17 -8.2939603453e-04j,   3.5926169576e-17 +7.9620571941e-04j,  -4.1562728690e-20 -1.4487849289e-04j,  -4.6936754970e-05 -6.3569446306e-06j,  -1.0350218312e-18 -1.2765294048e-04j,  -2.3137883903e-05 -7.7196140094e-05j,   2.8111799622e-19 +1.5501386084e-05j,   2.5250864548e-19 -1.5492767467e-05j,  -1.3170984143e-05 -7.1105168282e-06j,  -1.2840460768e-05 +7.0575697205e-06j,  -1.3170984143e-05 +7.1105168282e-06j,  -1.2840460768e-05 -7.0575697205e-06j,   2.8111799622e-19 -1.5501386084e-05j,   2.5250864548e-19 +1.5492767467e-05j,  -1.0350218312e-18 +1.2765294048e-04j,  -2.3137883903e-05 +7.7196140094e-05j,  -4.1562728690e-20 +1.4487849289e-04j,  -4.6936754970e-05 +6.3569446306e-06j,   4.6263427324e-17 +8.2939603453e-04j,   3.5926169576e-17 -7.9620571941e-04j,  -3.6547343315e-06 +8.1641055461e-05j,   1.6077893929e-17 +1.0730103240e-03j],
                               [ -8.6780534166e-06 -1.9385415628e-04j,   1.8179492605e-17 -2.5478297638e-03j,  -4.1969337358e-18 +2.7619426727e-18j,  -4.9305995389e-18 -2.1209870894e-18j,  -2.5157000138e-20 -1.9154859934e-06j,  -6.2056620640e-07 -8.4047246475e-08j,  -1.0597491157e-20 +2.7265454918e-19j,   3.7945968628e-20 +3.5957156369e-20j,  -4.4699489930e-20 -3.0957826360e-20j,  -4.5006791108e-20 +3.0524796947e-20j,   1.3948232509e-08 +7.5301238619e-09j,   1.3598204232e-08 -7.4740522305e-09j,   1.3948232509e-08 -7.5301238619e-09j,   1.3598204232e-08 +7.4740522305e-09j,  -4.4699489930e-20 +3.0957826360e-20j,  -4.5006791108e-20 -3.0524796947e-20j,  -1.0597491157e-20 -2.7265454918e-19j,   3.7945968628e-20 -3.5957156369e-20j,  -2.5157000138e-20 +1.9154859934e-06j,  -6.2056620640e-07 +8.4047246475e-08j,  -4.1969337358e-18 -2.7619426727e-18j,  -4.9305995389e-18 +2.1209870894e-18j,  -8.6780534166e-06 +1.9385415628e-04j,   1.8179492605e-17 +2.5478297638e-03j],
                               [  2.2734486203e-17 -2.6383507025e-03j,  -4.5420150729e-05 -7.1066847165e-04j,  -2.2951905087e-18 -3.5195438663e-18j,  -4.1066915368e-18 +4.4153591552e-18j,   4.6106954222e-07 -1.2408356859e-06j,  -8.9598306671e-21 +2.2425830100e-06j,  -1.0055803350e-21 +1.0948301325e-20j,  -5.1597446605e-22 -5.1848550096e-21j,  -5.5991909452e-20 +2.0590770979e-20j,  -5.5998216993e-20 -2.1350391241e-20j,   4.6115565728e-20 +1.5982908835e-08j,   4.4484179096e-20 -1.6307566196e-08j,   4.6115565728e-20 -1.5982908835e-08j,   4.4484179096e-20 +1.6307566196e-08j,  -5.5991909452e-20 -2.0590770979e-20j,  -5.5998216993e-20 +2.1350391241e-20j,  -1.0055803350e-21 -1.0948301325e-20j,  -5.1597446605e-22 +5.1848550096e-21j,   4.6106954222e-07 +1.2408356859e-06j,  -8.9598306671e-21 -2.2425830100e-06j,  -2.2951905087e-18 +3.5195438663e-18j,  -4.1066915368e-18 -4.4153591552e-18j,   2.2734486203e-17 +2.6383507025e-03j,  -4.5420150729e-05 +7.1066847165e-04j],
                               [ -1.4779766520e-16 +2.3642046684e-15j,   2.0182440646e-16 -2.2294276024e-15j,  -4.1982094859e-04 -9.9071782702e-05j,  -4.5276433219e-04 +2.1001036576e-04j,   2.8247449636e-19 -1.2352916494e-18j,  -9.8324612366e-20 +4.8298101085e-19j,   5.3168205122e-06 -1.7497879010e-05j,   1.7657980316e-19 +4.4489773628e-05j,  -1.4552069264e-07 -9.3411237206e-08j,  -1.4667596796e-07 +9.1787247366e-08j,   5.1495013209e-19 -4.0665892248e-19j,   4.9697530507e-19 +4.2842279614e-19j,   5.1495013209e-19 +4.0665892248e-19j,   4.9697530507e-19 -4.2842279614e-19j,  -1.4552069264e-07 +9.3411237206e-08j,  -1.4667596796e-07 -9.1787247366e-08j,   5.3168205122e-06 +1.7497879010e-05j,   1.7657980316e-19 -4.4489773628e-05j,   2.8247449636e-19 +1.2352916494e-18j,  -9.8324612366e-20 -4.8298101085e-19j,  -4.1982094859e-04 +9.9071782702e-05j,  -4.5276433219e-04 -2.1001036576e-04j,  -1.4779766520e-16 -2.3642046684e-15j,   2.0182440646e-16 +2.2294276024e-15j],
                               [  3.0856286098e-17 -3.0998720746e-16j,   1.0987185336e-17 -1.3295828289e-16j,   4.3983459489e-17 -8.9647922256e-04j,   3.3037708885e-17 +8.6060440927e-04j,   2.3946413122e-19 -1.2285311365e-19j,   2.3014401378e-20 +9.2546392460e-19j,   2.9512849931e-19 +5.2296444820e-05j,   9.4790536297e-06 +3.1625465623e-05j,  -4.7778525175e-19 +1.8196081253e-07j,  -4.8183159243e-19 -1.8185964413e-07j,   1.5128610071e-19 +7.4278941112e-19j,   1.5113621775e-19 -7.5554564805e-19j,   1.5128610071e-19 -7.4278941112e-19j,   1.5113621775e-19 +7.5554564805e-19j,  -4.7778525175e-19 -1.8196081253e-07j,  -4.8183159243e-19 +1.8185964413e-07j,   2.9512849931e-19 -5.2296444820e-05j,   9.4790536297e-06 -3.1625465623e-05j,   2.3946413122e-19 +1.2285311365e-19j,   2.3014401378e-20 -9.2546392460e-19j,   4.3983459489e-17 +8.9647922256e-04j,   3.3037708885e-17 -8.6060440927e-04j,   3.0856286098e-17 +3.0998720746e-16j,   1.0987185336e-17 +1.3295828289e-16j],
                               [ -8.0609870120e-06 -1.8006985680e-04j,   1.9178643935e-17 -2.3666623894e-03j,   6.6536430581e-18 -2.1333186036e-04j,   3.3510461325e-18 +2.0479486311e-04j,  -2.2394702009e-19 +2.5070888594e-05j,   8.1222970461e-06 +1.1000545868e-06j,  -8.9480805596e-20 -2.0200223658e-05j,  -3.6614153035e-06 -1.2215772622e-05j,  -2.6378890705e-18 +4.9130929780e-07j,  -2.6590028021e-18 -4.9103613471e-07j,   4.1646816096e-07 +2.2483542876e-07j,   4.0601697062e-07 -2.2316123461e-07j,   4.1646816096e-07 -2.2483542876e-07j,   4.0601697062e-07 +2.2316123461e-07j,  -2.6378890705e-18 -4.9130929780e-07j,  -2.6590028021e-18 +4.9103613471e-07j,  -8.9480805596e-20 +2.0200223658e-05j,  -3.6614153035e-06 +1.2215772622e-05j,  -2.2394702009e-19 -2.5070888594e-05j,   8.1222970461e-06 -1.1000545868e-06j,   6.6536430581e-18 +2.1333186036e-04j,   3.3510461325e-18 -2.0479486311e-04j,  -8.0609870120e-06 +1.8006985680e-04j,   1.9178643935e-17 +2.3666623894e-03j],
                               [  5.7937459721e-17 -2.4507466969e-03j,  -4.2190480691e-05 -6.6013529126e-04j,   9.9903245637e-05 +2.3575747414e-05j,   1.0774266136e-04 -4.9975393624e-05j,  -6.0347207795e-06 +1.6240710374e-05j,  -5.2386578429e-20 -2.9352106463e-05j,   2.0536953107e-06 -6.7587972903e-06j,   3.4336328020e-20 +1.7184789155e-05j,   3.9291794930e-07 +2.5221809421e-07j,   3.9603728858e-07 -2.4783318684e-07j,  -1.0903534942e-20 +4.7721979433e-07j,  -1.0737126385e-20 -4.8691345653e-07j,  -1.0903534942e-20 -4.7721979433e-07j,  -1.0737126385e-20 +4.8691345653e-07j,   3.9291794930e-07 -2.5221809421e-07j,   3.9603728858e-07 +2.4783318684e-07j,   2.0536953107e-06 +6.7587972903e-06j,   3.4336328020e-20 -1.7184789155e-05j,  -6.0347207795e-06 -1.6240710374e-05j,  -5.2386578429e-20 +2.9352106463e-05j,   9.9903245637e-05 -2.3575747414e-05j,   1.0774266136e-04 +4.9975393624e-05j,   5.7937459721e-17 +2.4507466969e-03j,  -4.2190480691e-05 +6.6013529126e-04j],
                               [ -1.3578123174e-16 -1.1111329267e-03j,  -1.9128550637e-05 -2.9929574491e-04j,  -3.8840591193e-04 -9.1658280124e-05j,  -4.1888415509e-04 +1.9429537260e-04j,   3.4873165674e-05 -9.3851066888e-05j,   2.6034781086e-19 +1.6961859694e-04j,  -1.2978086268e-05 +4.2711425518e-05j,  -1.9291720561e-19 -1.0859725636e-04j,  -1.2397023339e-05 -7.9577774595e-06j,  -1.2495442161e-05 +7.8194284757e-06j,   2.7257430347e-19 -1.5092280594e-05j,   2.5493508673e-19 +1.5398846817e-05j,   2.7257430347e-19 +1.5092280594e-05j,   2.5493508673e-19 -1.5398846817e-05j,  -1.2397023339e-05 +7.9577774595e-06j,  -1.2495442161e-05 -7.8194284757e-06j,  -1.2978086268e-05 -4.2711425518e-05j,  -1.9291720561e-19 +1.0859725636e-04j,   3.4873165674e-05 +9.3851066888e-05j,   2.6034781086e-19 -1.6961859694e-04j,  -3.8840591193e-04 +9.1658280124e-05j,  -4.1888415509e-04 -1.9429537260e-04j,  -1.3578123174e-16 +1.1111329267e-03j,  -1.9128550637e-05 +2.9929574491e-04j],
                               [  3.6547343316e-06 +8.1641055460e-05j,   1.1634088946e-18 +1.0730103240e-03j,   4.2446807840e-17 -8.2939603453e-04j,   3.2547731266e-17 +7.9620571941e-04j,  -1.1401875623e-18 +1.4487849289e-04j,   4.6936754970e-05 +6.3569446305e-06j,  -5.4044561674e-19 -1.2765294048e-04j,  -2.3137883903e-05 -7.7196140094e-05j,  -8.3448316851e-17 +1.5501386084e-05j,  -8.4122018372e-17 -1.5492767467e-05j,   1.3170984143e-05 +7.1105168283e-06j,   1.2840460768e-05 -7.0575697206e-06j,   1.3170984143e-05 -7.1105168283e-06j,   1.2840460768e-05 +7.0575697206e-06j,  -8.3448316851e-17 -1.5501386084e-05j,  -8.4122018372e-17 +1.5492767467e-05j,  -5.4044561674e-19 +1.2765294048e-04j,  -2.3137883903e-05 +7.7196140094e-05j,  -1.1401875623e-18 -1.4487849289e-04j,   4.6936754970e-05 -6.3569446305e-06j,   4.2446807840e-17 +8.2939603453e-04j,   3.2547731266e-17 -7.9620571941e-04j,   3.6547343316e-06 -8.1641055460e-05j,   1.1634088946e-18 -1.0730103240e-03j],
                               [  3.8781775712e-02 -1.7361006216e-03j,   5.0970979600e-01 -2.1027444040e-15j,  -1.2757773057e-01 -3.0665679048e-15j,   1.2247239500e-01 -3.6262997362e-15j,  -9.9186075723e-02 +7.7948102958e-17j,  -4.3520634356e-03 +3.2133634468e-02j,  -1.0029996498e-01 +7.9602307717e-16j,  -6.0654851496e-02 +1.8179988149e-02j,   1.6236927831e-02 +2.3177722123e-16j,  -1.6227900261e-02 +2.3252485776e-16j,  -7.4757389142e-03 +1.3847493941e-02j,   7.4200722499e-03 +1.3499993680e-02j,  -7.4757389142e-03 -1.3847493941e-02j,   7.4200722499e-03 -1.3499993680e-02j,   1.6236927831e-02 -2.3177722123e-16j,  -1.6227900261e-02 -2.3252485776e-16j,  -1.0029996498e-01 -7.9602307717e-16j,  -6.0654851496e-02 -1.8179988149e-02j,  -9.9186075723e-02 -7.7948102958e-17j,  -4.3520634356e-03 -3.2133634468e-02j,  -1.2757773057e-01 +3.0665679048e-15j,   1.2247239500e-01 +3.6262997362e-15j,   3.8781775712e-02 +1.7361006216e-03j,   5.0970979600e-01 +2.1027444040e-15j],
                               [  5.2781909430e-01 -2.7809739955e-14j,   1.4217381666e-01 -9.0865944386e-03j,   1.4098880245e-02 -5.9744612612e-02j,  -2.9886521836e-02 -6.4432777170e-02j,  -6.4251904073e-02 -2.3874713095e-02j,   1.1612353680e-01 +1.0143283966e-16j,  -3.3559387410e-02 -1.0197192428e-02j,   8.5327458722e-02 -2.0376537831e-16j,   8.3353745019e-03 -1.2985262878e-02j,  -8.1904608501e-03 -1.3088351680e-02j,  -1.5867475188e-02 +9.2696568751e-14j,   1.6189787770e-02 +8.9613837361e-14j,  -1.5867475188e-02 -9.2696568751e-14j,   1.6189787770e-02 -8.9613837361e-14j,   8.3353745019e-03 +1.2985262878e-02j,  -8.1904608501e-03 +1.3088351680e-02j,  -3.3559387410e-02 +1.0197192428e-02j,   8.5327458722e-02 +2.0376537831e-16j,  -6.4251904073e-02 +2.3874713095e-02j,   1.1612353680e-01 -1.0143283966e-16j,   1.4098880245e-02 +5.9744612612e-02j,  -2.9886521836e-02 +6.4432777170e-02j,   5.2781909430e-01 +2.7809739955e-14j,   1.4217381666e-01 +9.0865944386e-03j],
                               [ -2.3930550464e-01 -2.8804636549e-13j,  -6.4459541741e-02 +4.1197298297e-03j,   5.4813919245e-02 -2.3227634494e-01j,  -1.1619343990e-01 -2.5050308842e-01j,  -3.7129593521e-01 -1.3796608917e-01j,   6.7104933028e-01 +0.0000000000e+00j,  -2.1207460651e-01 -6.4439959684e-02j,   5.3921685195e-01 +0.0000000000e+00j,   2.6299086723e-01 -4.0970031338e-01j,  -2.5841867111e-01 -4.1295288629e-01j,  -5.0181570569e-01 +2.9244831807e-12j,   5.1200897930e-01 +2.8264430242e-12j,  -5.0181570569e-01 -2.9244831807e-12j,   5.1200897930e-01 -2.8264430242e-12j,   2.6299086723e-01 +4.0970031338e-01j,  -2.5841867111e-01 +4.1295288629e-01j,  -2.1207460651e-01 +6.4439959684e-02j,   5.3921685195e-01 -0.0000000000e+00j,  -3.7129593521e-01 +1.3796608917e-01j,   6.7104933028e-01 -0.0000000000e+00j,   5.4813919245e-02 +2.3227634494e-01j,  -1.1619343990e-01 +2.5050308842e-01j,  -2.3930550464e-01 +2.8804636549e-13j,  -6.4459541741e-02 -4.1197298297e-03j],
                               [  1.7583093351e-02 -7.8712278469e-04j,   2.3109501204e-01 -9.5613972168e-14j,   4.9599934885e-01 +8.7731603385e-15j,  -4.7615071925e-01 +3.3334231526e-15j,   5.7317191260e-01 +0.0000000000e+00j,   2.5149503143e-02 -1.8569236249e-01j,   6.3383384640e-01 -3.5755319747e-15j,   3.8330120888e-01 -1.1488629950e-01j,  -5.1229416633e-01 +0.0000000000e+00j,   5.1200933586e-01 +0.0000000000e+00j,   2.3642344824e-01 -4.3793293273e-01j,  -2.3466296611e-01 -4.2694308798e-01j,   2.3642344824e-01 +4.3793293273e-01j,  -2.3466296611e-01 +4.2694308798e-01j,  -5.1229416633e-01 -0.0000000000e+00j,   5.1200933586e-01 -0.0000000000e+00j,   6.3383384640e-01 +3.5755319747e-15j,   3.8330120888e-01 +1.1488629950e-01j,   5.7317191260e-01 -0.0000000000e+00j,   2.5149503143e-02 +1.8569236249e-01j,   4.9599934885e-01 -8.7731603385e-15j,  -4.7615071925e-01 -3.3334231526e-15j,   1.7583093351e-02 +7.8712278469e-04j,   2.3109501204e-01 +9.5613972168e-14j],
                               [  4.1750510294e-02 -1.8689986609e-03j,   5.4872794487e-01 +0.0000000000e+00j,  -1.5902318648e-15 -2.5176647121e-15j,   1.3582057417e-15 -2.9584190395e-15j,   7.5780935356e-03 -9.5451701174e-17j,   3.3250981600e-04 -2.4550995274e-03j,  -1.3601505850e-15 -6.2372892007e-17j,  -1.6224576969e-16 +2.0978305587e-16j,   1.0293390630e-15 -1.4818956323e-15j,  -1.0136250335e-15 -1.4930154168e-15j,  -2.5037530916e-04 +4.6377630576e-04j,   2.4851093716e-04 +4.5213792642e-04j,  -2.5037530916e-04 -4.6377630576e-04j,   2.4851093716e-04 -4.5213792642e-04j,   1.0293390630e-15 +1.4818956323e-15j,  -1.0136250335e-15 +1.4930154168e-15j,  -1.3601505850e-15 +6.2372892007e-17j,  -1.6224576969e-16 -2.0978305587e-16j,   7.5780935356e-03 +9.5451701174e-17j,   3.3250981600e-04 +2.4550995274e-03j,  -1.5902318648e-15 +2.5176647121e-15j,   1.3582057417e-15 +2.9584190395e-15j,   4.1750510294e-02 +1.8689986609e-03j,   5.4872794487e-01 -0.0000000000e+00j],
                               [  5.6822350512e-01 +0.0000000000e+00j,   1.5305718438e-01 -9.7821708181e-03j,   2.1305304971e-15 -1.7649101049e-15j,  -2.6057006568e-15 -2.0755311305e-15j,   4.9090251364e-03 +1.8240948404e-03j,  -8.8721629237e-03 -1.2201935087e-17j,  -4.9936617590e-17 -2.6645051226e-17j,   1.8523098797e-17 -2.6231027240e-18j,  -6.8043761893e-16 -1.8538310075e-15j,   7.0560584990e-16 -1.8478596552e-15j,  -5.3142893983e-04 +1.5408220237e-15j,   5.4222374065e-04 +1.4894923791e-15j,  -5.3142893983e-04 -1.5408220237e-15j,   5.4222374065e-04 -1.4894923791e-15j,  -6.8043761893e-16 +1.8538310075e-15j,   7.0560584990e-16 +1.8478596552e-15j,  -4.9936617590e-17 +2.6645051226e-17j,   1.8523098797e-17 +2.6231027240e-18j,   4.9090251364e-03 -1.8240948404e-03j,  -8.8721629237e-03 +1.2201935087e-17j,   2.1305304971e-15 +1.7649101049e-15j,  -2.6057006568e-15 +2.0755311305e-15j,   5.6822350512e-01 -0.0000000000e+00j,   1.5305718438e-01 +9.7821708181e-03j],
                               [ -5.0930203439e-13 -6.7646645244e-14j,   4.7386209087e-13 +1.4721627310e-14j,   5.9247377205e-02 -2.5106331410e-01j,  -1.2559139462e-01 -2.7076427256e-01j,   4.8195965687e-15 +1.1947969519e-15j,  -1.7710912121e-15 -5.8851285606e-16j,   8.6882040597e-02 +2.6399554787e-02j,  -2.2090462028e-01 +5.3462580185e-16j,   3.0870808347e-03 -4.8092087710e-03j,  -3.0334107618e-03 -4.8473886349e-03j,   1.3505630979e-14 +1.7098403783e-14j,  -1.4228250198e-14 +1.6526850178e-14j,   1.3505630979e-14 -1.7098403783e-14j,  -1.4228250198e-14 -1.6526850178e-14j,   3.0870808347e-03 +4.8092087710e-03j,  -3.0334107618e-03 +4.8473886349e-03j,   8.6882040597e-02 -2.6399554787e-02j,  -2.2090462028e-01 -5.3462580185e-16j,   4.8195965687e-15 -1.1947969519e-15j,  -1.7710912121e-15 +5.8851285606e-16j,   5.9247377205e-02 +2.5106331410e-01j,  -1.2559139462e-01 +2.7076427256e-01j,  -5.0930203439e-13 +6.7646645244e-14j,   4.7386209087e-13 -1.4721627310e-14j],
                               [  6.6395543173e-14 +3.0508146732e-14j,   2.8365838919e-14 +2.3984703404e-14j,   5.3611675501e-01 +0.0000000000e+00j,  -5.1466272908e-01 +0.0000000000e+00j,   5.7364386460e-16 +9.7051168776e-16j,  -3.7603297372e-15 +2.0933676908e-17j,  -2.5966700531e-01 +1.4816120618e-15j,  -1.5702960265e-01 +4.7066248531e-02j,  -6.0134921005e-03 -1.5902887002e-14j,   6.0101486586e-03 -1.6043955852e-14j,  -2.4644007027e-14 +5.0308179835e-15j,   2.5068322114e-14 +5.0191454114e-15j,  -2.4644007027e-14 -5.0308179835e-15j,   2.5068322114e-14 -5.0191454114e-15j,  -6.0134921005e-03 +1.5902887002e-14j,   6.0101486586e-03 +1.6043955852e-14j,  -2.5966700531e-01 -1.4816120618e-15j,  -1.5702960265e-01 -4.7066248531e-02j,   5.7364386460e-16 -9.7051168776e-16j,  -3.7603297372e-15 -2.0933676908e-17j,   5.3611675501e-01 -0.0000000000e+00j,  -5.1466272908e-01 -0.0000000000e+00j,   6.6395543173e-14 -3.0508146732e-14j,   2.8365838919e-14 -2.3984703404e-14j],
                               [  3.8781775712e-02 -1.7361006216e-03j,   5.0970979600e-01 -9.0655412574e-15j,   1.2757773057e-01 -2.5495192140e-15j,  -1.2247239500e-01 -2.2701096825e-15j,  -9.9186075723e-02 -8.2456521399e-16j,  -4.3520634356e-03 +3.2133634468e-02j,   1.0029996498e-01 -4.2518698086e-16j,   6.0654851496e-02 -1.8179988149e-02j,  -1.6236927831e-02 -8.7409954990e-14j,   1.6227900261e-02 -8.8097142925e-14j,  -7.4757389143e-03 +1.3847493941e-02j,   7.4200722500e-03 +1.3499993680e-02j,  -7.4757389143e-03 -1.3847493941e-02j,   7.4200722500e-03 -1.3499993680e-02j,  -1.6236927831e-02 +8.7409954990e-14j,   1.6227900261e-02 +8.8097142925e-14j,   1.0029996498e-01 +4.2518698086e-16j,   6.0654851496e-02 +1.8179988149e-02j,  -9.9186075723e-02 +8.2456521399e-16j,  -4.3520634356e-03 -3.2133634468e-02j,   1.2757773057e-01 +2.5495192140e-15j,  -1.2247239500e-01 +2.2701096825e-15j,   3.8781775712e-02 +1.7361006216e-03j,   5.0970979600e-01 +9.0655412574e-15j],
                               [  5.2781909430e-01 -1.2459067395e-14j,   1.4217381666e-01 -9.0865944386e-03j,  -1.4098880245e-02 +5.9744612612e-02j,   2.9886521836e-02 +6.4432777170e-02j,  -6.4251904073e-02 -2.3874713095e-02j,   1.1612353680e-01 -1.1395496975e-16j,   3.3559387410e-02 +1.0197192428e-02j,  -8.5327458722e-02 +1.2436288428e-16j,  -8.3353745020e-03 +1.2985262878e-02j,   8.1904608501e-03 +1.3088351680e-02j,  -1.5867475188e-02 -9.0811726194e-17j,   1.6189787770e-02 -8.1717207380e-17j,  -1.5867475188e-02 +9.0811726194e-17j,   1.6189787770e-02 +8.1717207380e-17j,  -8.3353745020e-03 -1.2985262878e-02j,   8.1904608501e-03 -1.3088351680e-02j,   3.3559387410e-02 -1.0197192428e-02j,  -8.5327458722e-02 -1.2436288428e-16j,  -6.4251904073e-02 +2.3874713095e-02j,   1.1612353680e-01 +1.1395496975e-16j,  -1.4098880245e-02 -5.9744612612e-02j,   2.9886521836e-02 -6.4432777170e-02j,   5.2781909430e-01 +1.2459067395e-14j,   1.4217381666e-01 +9.0865944386e-03j],
                               [  2.3930550464e-01 +3.9906352824e-13j,   6.4459541742e-02 -4.1197298299e-03j,   5.4813919245e-02 -2.3227634494e-01j,  -1.1619343990e-01 -2.5050308842e-01j,   3.7129593521e-01 +1.3796608917e-01j,  -6.7104933028e-01 +3.2663734129e-15j,  -2.1207460651e-01 -6.4439959684e-02j,   5.3921685195e-01 +1.6363240605e-15j,   2.6299086723e-01 -4.0970031337e-01j,  -2.5841867111e-01 -4.1295288628e-01j,   5.0181570569e-01 +0.0000000000e+00j,  -5.1200897930e-01 +0.0000000000e+00j,   5.0181570569e-01 -0.0000000000e+00j,  -5.1200897930e-01 -0.0000000000e+00j,   2.6299086723e-01 +4.0970031337e-01j,  -2.5841867111e-01 +4.1295288628e-01j,  -2.1207460651e-01 +6.4439959684e-02j,   5.3921685195e-01 -1.6363240605e-15j,   3.7129593521e-01 -1.3796608917e-01j,  -6.7104933028e-01 -3.2663734129e-15j,   5.4813919245e-02 +2.3227634494e-01j,  -1.1619343990e-01 +2.5050308842e-01j,   2.3930550464e-01 -3.9906352824e-13j,   6.4459541742e-02 +4.1197298299e-03j],
                               [ -1.7583093351e-02 +7.8712278485e-04j,  -2.3109501204e-01 +5.6590748574e-14j,   4.9599934885e-01 +8.2464172403e-15j,  -4.7615071925e-01 -2.6259482100e-15j,  -5.7317191260e-01 -1.7466330362e-15j,  -2.5149503143e-02 +1.8569236249e-01j,   6.3383384640e-01 +0.0000000000e+00j,   3.8330120888e-01 -1.1488629950e-01j,  -5.1229416632e-01 -2.7667582313e-12j,   5.1200933586e-01 -2.7883511131e-12j,  -2.3642344824e-01 +4.3793293273e-01j,   2.3466296612e-01 +4.2694308798e-01j,  -2.3642344824e-01 -4.3793293273e-01j,   2.3466296612e-01 -4.2694308798e-01j,  -5.1229416632e-01 +2.7667582313e-12j,   5.1200933586e-01 +2.7883511131e-12j,   6.3383384640e-01 -0.0000000000e+00j,   3.8330120888e-01 +1.1488629950e-01j,  -5.7317191260e-01 +1.7466330362e-15j,  -2.5149503143e-02 -1.8569236249e-01j,   4.9599934885e-01 -8.2464172403e-15j,  -4.7615071925e-01 +2.6259482100e-15j,  -1.7583093351e-02 -7.8712278485e-04j,  -2.3109501204e-01 -5.6590748574e-14j]])

    rotor2_evals, rotor2_evects = rotor2._eigen()
    mac1 = MAC_modes(evects_sorted, rotor2_evects)
    mac2 = MAC_modes(evects_sorted, rotor2.evectors)
    print(rotor2.w)
    print(mac1)
    assert_allclose(mac1.diagonal(), np.ones_like(mac1.diagonal()))
    assert_allclose(mac2.diagonal(), np.ones_like(mac1.diagonal()))


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_evects_not_sorted_rotor2(rotor2):
    evects = np.array([[  4.165e-07 +2.248e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 -2.232e-07j,   4.060e-07 +2.232e-07j],
                       [  2.780e-18 +4.772e-07j,   2.780e-18 -4.772e-07j,   2.687e-18 -4.869e-07j,   2.687e-18 +4.869e-07j],
                       [  8.767e-17 +1.509e-05j,   8.767e-17 -1.509e-05j,   8.476e-17 -1.540e-05j,   8.476e-17 +1.540e-05j],
                       [ -1.317e-05 -7.111e-06j,  -1.317e-05 +7.111e-06j,  -1.284e-05 +7.058e-06j,  -1.284e-05 -7.058e-06j],
                       [  1.395e-08 +7.530e-09j,   1.395e-08 -7.530e-09j,   1.360e-08 -7.474e-09j,   1.360e-08 +7.474e-09j],
                       [  4.612e-20 +1.598e-08j,   4.612e-20 -1.598e-08j,   4.448e-20 -1.631e-08j,   4.448e-20 +1.631e-08j],
                       [  5.150e-19 -4.067e-19j,   5.150e-19 +4.067e-19j,   4.970e-19 +4.284e-19j,   4.970e-19 -4.284e-19j],
                       [  1.513e-19 +7.428e-19j,   1.513e-19 -7.428e-19j,   1.511e-19 -7.555e-19j,   1.511e-19 +7.555e-19j],
                       [  4.165e-07 +2.248e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 -2.232e-07j,   4.060e-07 +2.232e-07j],
                       [ -1.090e-20 +4.772e-07j,  -1.090e-20 -4.772e-07j,  -1.074e-20 -4.869e-07j,  -1.074e-20 +4.869e-07j],
                       [  2.726e-19 -1.509e-05j,   2.726e-19 +1.509e-05j,   2.549e-19 +1.540e-05j,   2.549e-19 -1.540e-05j],
                       [  1.317e-05 +7.111e-06j,   1.317e-05 -7.111e-06j,   1.284e-05 -7.058e-06j,   1.284e-05 +7.058e-06j],
                       [ -7.476e-03 +1.385e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 +1.350e-02j,   7.420e-03 -1.350e-02j],
                       [ -1.587e-02 +9.270e-14j,  -1.587e-02 -9.270e-14j,   1.619e-02 +8.961e-14j,   1.619e-02 -8.961e-14j],
                       [ -5.018e-01 +2.924e-12j,  -5.018e-01 -2.924e-12j,   5.120e-01 +2.826e-12j,   5.120e-01 -2.826e-12j],
                       [  2.364e-01 -4.379e-01j,   2.364e-01 +4.379e-01j,  -2.347e-01 -4.269e-01j,  -2.347e-01 +4.269e-01j],
                       [ -2.504e-04 +4.638e-04j,  -2.504e-04 -4.638e-04j,   2.485e-04 +4.521e-04j,   2.485e-04 -4.521e-04j],
                       [ -5.314e-04 +1.541e-15j,  -5.314e-04 -1.541e-15j,   5.422e-04 +1.489e-15j,   5.422e-04 -1.489e-15j],
                       [  1.351e-14 +1.710e-14j,   1.351e-14 -1.710e-14j,  -1.423e-14 +1.653e-14j,  -1.423e-14 -1.653e-14j],
                       [ -2.464e-14 +5.031e-15j,  -2.464e-14 -5.031e-15j,   2.507e-14 +5.019e-15j,   2.507e-14 -5.019e-15j],
                       [ -7.476e-03 +1.385e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 +1.350e-02j,   7.420e-03 -1.350e-02j],
                       [ -1.587e-02 -9.081e-17j,  -1.587e-02 +9.081e-17j,   1.619e-02 -8.172e-17j,   1.619e-02 +8.172e-17j],
                       [  5.018e-01 +0.000e+00j,   5.018e-01 -0.000e+00j,  -5.120e-01 +0.000e+00j,  -5.120e-01 -0.000e+00j],
                       [ -2.364e-01 +4.379e-01j,  -2.364e-01 -4.379e-01j,   2.347e-01 +4.269e-01j,   2.347e-01 -4.269e-01j]])
    rotor2_evals, rotor2_evects = rotor2._eigen(sorted_=False)
    assert_allclose(rotor2_evects[:, 0:4], evects, rtol=1e-3)


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_kappa_rotor2(rotor2):
    assert_allclose(rotor2.kappa(0, 0)['Frequency'], 34.27731, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Major axes'], 0.002456923, rtol=1e-1)
    assert_allclose(rotor2.kappa(0, 0)['Minor axes'], 8.039315263553689e-06, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['kappa'], -0.00327153425, rtol=1e-3)

    rotor2.w = 2000
    assert_allclose(rotor2.kappa(0, 0)['Frequency'], 25.7839904, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Major axes'], 0.00061657, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Minor axes'], 0.00060573, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['kappa'], -0.98242121, rtol=1e-3)

    assert_allclose(rotor2.kappa(0, 1)['Frequency'], 34.27730466, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['Major axes'], 0.0024574521, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['Minor axes'], 6.890315481064042e-08, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['kappa'], 2.8038451836263183e-05, rtol=1e-3)


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_kappa_mode_rotor2(rotor2):
    assert_allclose(rotor2.kappa_mode(0), [-0.0032715342590611774,
                                           -0.003271534259070017,
                                           -0.003271534259059628], rtol=1e-3)

    assert_allclose(rotor2.kappa_mode(1), [0.01653978084519139,
                                           0.016539780845213483,
                                           0.016539780845234074], rtol=1e-3)


#  TODO implement more tests using a simple rotor with 2 elements and one disk
#  TODO add test for damped case

