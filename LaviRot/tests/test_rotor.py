import pytest
from LaviRot.elements import *
from LaviRot.rotor import *
from LaviRot.results import MAC_modes
import numpy as np
from numpy.testing import assert_almost_equal, assert_allclose


@pytest.fixture
def rotor1():
    #  Rotor without damping with 2 shaft elements - no disks and no bearings
    le_ = 0.25
    i_d_ = 0
    o_d_ = 0.05
    E_ = 211e9
    G_ = 81.2e9
    rho_ = 7810

    tim0 = ShaftElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)
    tim1 = ShaftElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)

    shaft_elm = [tim0, tim1]
    return Rotor(shaft_elm, [], [])


def test_index_eigenvalues_rotor1(rotor1):
    evalues = np.array([-3.8 + 68.6j, -3.8 - 68.6j, -1.8 + 30.j, -1.8 - 30.j, -0.7 + 14.4j, -0.7 - 14.4j])
    evalues2 = np.array([0. + 68.7j, 0. - 68.7j, 0. + 30.1j, 0. - 30.1j, -0. + 14.4j, -0. - 14.4j])
    assert_almost_equal([4, 2, 0, 1, 3, 5], rotor1._index(evalues))
    assert_almost_equal([4, 2, 0, 1, 3, 5], rotor1._index(evalues2))


def test_mass_matrix_rotor1(rotor1):
    Mr1 = np.array([[ 1.421,  0.   ,  0.   ,  0.049,  0.496,  0.   ,  0.   , -0.031,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   ,  1.421, -0.049,  0.   ,  0.   ,  0.496,  0.031,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   , -0.049,  0.002,  0.   ,  0.   , -0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.049,  0.   ,  0.   ,  0.002,  0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.496,  0.   ,  0.   ,  0.031,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   , -0.031],
                    [ 0.   ,  0.496, -0.031,  0.   ,  0.   ,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.031,  0.   ],
                    [ 0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.   ,  0.   , -0.031, -0.002,  0.   ],
                    [-0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.031,  0.   ,  0.   , -0.002],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   ,  0.031,  1.421,  0.   ,  0.   , -0.049],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.496, -0.031,  0.   ,  0.   ,  1.421,  0.049,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.049,  0.002,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   , -0.031,  0.   ,  0.   , -0.002, -0.049,  0.   ,  0.   ,  0.002]])

    assert_almost_equal(rotor1.M(), Mr1, decimal=3)


@pytest.fixture
def rotor2():
    #  Rotor without damping with 2 shaft elements 1 disk and 2 bearings
    le_ = 0.25
    i_d_ = 0
    o_d_ = 0.05
    E_ = 211e9
    G_ = 81.2e9
    rho_ = 7810

    tim0 = ShaftElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)
    tim1 = ShaftElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                        shear_effects=True,
                        rotary_inertia=True,
                        gyroscopic=True)

    shaft_elm = [tim0, tim1]
    disk0 = DiskElement(1, rho_, 0.07, 0.05, 0.28)
    stf = 1e6
    bearing0 = BearingElement(0, stf, stf, 0, 0)
    bearing1 = BearingElement(2, stf, stf, 0, 0)

    return Rotor(shaft_elm, [disk0], [bearing0, bearing1])


def test_mass_matrix_rotor2(rotor2):
    Mr2 = np.array([[  1.421,   0.   ,   0.   ,   0.049,   0.496,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,   1.421,  -0.049,   0.   ,   0.   ,   0.496,   0.031,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,  -0.049,   0.002,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.049,   0.   ,   0.   ,   0.002,   0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.496,   0.   ,   0.   ,   0.031,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,  -0.031],
                    [  0.   ,   0.496,  -0.031,   0.   ,   0.   ,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.031,   0.   ],
                    [  0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ],
                    [ -0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.031,   0.   ,   0.   ,  -0.002],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,   0.031,   1.421,   0.   ,   0.   ,  -0.049],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.496,  -0.031,   0.   ,   0.   ,   1.421,   0.049,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.049,   0.002,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,  -0.002,  -0.049,   0.   ,   0.   ,   0.002]])
    assert_almost_equal(rotor2.M(), Mr2, decimal=3)


def test_a0_0_matrix_rotor2(rotor2):
    A0_0 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
    assert_almost_equal(rotor2.A()[:12, :12], A0_0, decimal=3)


def test_a0_1_matrix_rotor2(rotor2):
    A0_1 = np.array([[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]])
    assert_almost_equal(rotor2.A()[:12, 12:24], A0_1, decimal=3)


def test_a1_0_matrix_rotor2(rotor2):
    A1_0 = np.array([[  20.63 ,   -0.   ,    0.   ,    4.114,  -20.958,    0.   ,    0.   ,    1.11 ,    0.056,   -0.   ,   -0.   ,   -0.014],
                     [   0.   ,   20.63 ,   -4.114,    0.   ,   -0.   ,  -20.958,   -1.11 ,    0.   ,   -0.   ,    0.056,    0.014,    0.   ],
                     [   0.   ,  697.351, -131.328,    0.   ,   -0.   , -705.253,  -44.535,    0.   ,   -0.   ,    2.079,    0.596,    0.   ],
                     [-697.351,    0.   ,   -0.   , -131.328,  705.253,   -0.   ,   -0.   ,  -44.535,   -2.079,    0.   ,    0.   ,    0.596],
                     [   0.442,    0.   ,   -0.   ,    0.072,   -0.887,   -0.   ,   -0.   ,   -0.   ,    0.442,    0.   ,    0.   ,   -0.072],
                     [   0.   ,    0.442,   -0.072,    0.   ,   -0.   ,   -0.887,    0.   ,    0.   ,    0.   ,    0.442,    0.072,   -0.   ],
                     [   0.   ,    6.457,   -0.837,    0.   ,   -0.   ,    0.   ,   -1.561,    0.   ,   -0.   ,   -6.457,   -0.837,   -0.   ],
                     [  -6.457,   -0.   ,    0.   ,   -0.837,    0.   ,    0.   ,    0.   ,   -1.561,    6.457,    0.   ,    0.   ,   -0.837],
                     [   0.056,   -0.   ,    0.   ,    0.014,  -20.958,    0.   ,    0.   ,   -1.11 ,   20.63 ,    0.   ,    0.   ,   -4.114],
                     [   0.   ,    0.056,   -0.014,    0.   ,   -0.   ,  -20.958,    1.11 ,    0.   ,    0.   ,   20.63 ,    4.114,   -0.   ],
                     [  -0.   ,   -2.079,    0.596,   -0.   ,    0.   ,  705.253,  -44.535,   -0.   ,   -0.   , -697.351, -131.328,    0.   ],
                     [   2.079,    0.   ,   -0.   ,    0.596, -705.253,   -0.   ,    0.   ,  -44.535,  697.351,    0.   ,    0.   , -131.328]])
    assert_almost_equal(rotor2.A()[12:24, :12]/1e7, A1_0, decimal=3)


def test_a1_1_matrix_rotor2(rotor2):
    A1_1 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
    assert_almost_equal(rotor2.A()[12:24, 12:24] / 1e7, A1_1, decimal=3)


def test_evals_sorted_rotor2(rotor2):
    evals_sorted = np.array([  1.4667459679e-12 +215.3707255735j,   3.9623200168e-12 +215.3707255733j,
                               7.4569772223e-11 +598.0247411492j,   1.1024641658e-11 +598.0247411456j,
                               4.3188161105e-09+3956.2249777612j,   2.5852376472e-11+3956.2249797838j,
                               4.3188161105e-09-3956.2249777612j,   2.5852376472e-11-3956.2249797838j,
                               7.4569772223e-11 -598.0247411492j,   1.1024641658e-11 -598.0247411456j,
                               1.4667459679e-12 -215.3707255735j,   3.9623200168e-12 -215.3707255733j])

    evals_sorted_w_10000 = np.array([  8.3087982977e-14  +34.8221380094j,   5.0452453663e-01 +215.3690114321j,
                                       -5.0452453663e-01 +215.3690114322j,  -7.1409152053e-07+3470.8976161552j,
                                       6.9042014718e-07+3850.2126301237j,   4.1762911393e+01+3990.2290333015j,
                                       4.1762911393e+01-3990.2290333015j,   6.9042014718e-07-3850.2126301237j,
                                       -7.1409152053e-07-3470.8976161552j,   5.0452453663e-01 -215.3690114321j,
                                       -5.0452453663e-01 -215.3690114322j,   8.3087982977e-14  -34.8221380094j])

    rotor2_evals, rotor2_evects = rotor2._eigen()
    assert_allclose(rotor2_evals, evals_sorted, rtol=1e-3)
    assert_allclose(rotor2.evalues, evals_sorted, rtol=1e-3)
    rotor2.w = 10000
    assert_allclose(rotor2.evalues, evals_sorted_w_10000, rtol=1e-3)


def test_evals_not_sorted_rotor2(rotor2):
    evals = np.array([  7.854e-12 -215.371j,   7.854e-12 +215.371j,
                        -1.883e-10 -598.025j,  -1.883e-10 +598.025j,
                        -3.267e-11 -215.371j,  -3.267e-11 +215.371j,
                        -2.204e-11 -598.025j,  -2.204e-11 +598.025j,
                        2.748e-10-3956.225j,   2.748e-10+3956.225j,
                        -4.253e-09-3956.225j,  -4.253e-09+3956.225j])

    rotor2_evals, rotor2_evects = rotor2._eigen(sorted_=False)
    assert_almost_equal(rotor2_evals, evals, decimal=3)


def test_evects_sorted_rotor2(rotor2):
    evects_sorted = np.array([[ -1.070928173309765481235888984202e-03 -1.885778498834041519947868348339e-05j,   1.800479987766720859146407640594e-03 +2.055750139422004717400238593683e-04j,  -8.053957964517193311056717820728e-08 -5.787003297423053046468974236483e-05j,  -2.696000661077177158605154821264e-07 -2.007820574948752240240779087799e-04j],
                              [  2.211633639178739191982758782729e-03 -9.131409864888261147179530918816e-06j,  -1.615454296024221953961830244850e-03 -3.807461750253407950679573890085e-04j,   2.030326951121172656209675269883e-08 -2.295604699913594338479827516863e-04j,  -8.244487924415280596419789219120e-07 -1.254303391837282199896413947826e-04j],
                              [ -1.002722542282870245994308433524e-03 +4.140048492784927962264036882534e-06j,   7.324234945424835203572899722246e-04 +1.726247809864521779929513733975e-04j,   7.893547314580346743785881254152e-08 -8.924899598660750773410077485437e-04j,  -3.205309126052162730074329699548e-06 -4.876506760427979769029205314723e-04j],
                              [ -4.855432660750438975810761021989e-04 -8.549845584798430243758486646311e-06j,   8.163114535184923031482795430236e-04 +9.320472295019254687156728955699e-05j,   3.131234491723436811254431110657e-07 +2.249883153277884790047225216369e-04j,   1.048156732534860371378482996052e-06 +7.806046504718335780209637064786e-04j],
                              [ -1.152907439193546221614661284605e-03 -2.030134339690076639064336694318e-05j,   1.938306250362280920215840573917e-03 +2.213117264006637637321905920373e-04j,  -3.269932130254994359823647690885e-17 +1.017811770967687727734870373930e-15j,  -7.392280574060777653468868410885e-17 +9.516959491915246623234994434069e-16j],
                              [  2.380933604075143213141263487387e-03 -9.830416853293290216711519668991e-06j,  -1.739116891294358816649756604988e-03 -4.098921931199629720143917666064e-04j,  -1.518107793767591631180501962869e-17 -1.183645153464288680998038400874e-15j,   9.362883818292708072905016563510e-18 -1.385098056795899753041749181941e-15j],
                              [ -3.545129173817106851392031681006e-15 +1.015461236015886223290543790150e-17j,   2.135696628878326359497303840518e-15 +6.774890698675226044649662722667e-16j,   8.531992985764947909149095300885e-08 -9.646763091176713787733287830406e-04j,  -3.464560854101041206668572941529e-06 -5.270928250784797687578109304241e-04j],
                              [  9.720175243193363156853242683296e-16 -4.126554038857041961793615662053e-18j,  -7.403780715867633051571700671999e-16 -1.642737521488835526646242621627e-16j,   3.384494915109876831515306732506e-07 +2.431858142642236576391051583457e-04j,   1.132933716694977087515545585705e-06 +8.437414950818878777577536354215e-04j],
                              [ -1.070928173308851065123614709762e-03 -1.885778498833967997488046675070e-05j,   1.800479987765181942582781715601e-03 +2.055750139420732135100283732854e-04j,   8.053957945148989555210109576519e-08 +5.787003297042768456843325752814e-05j,   2.696000655790512074359269092255e-07 +2.007820574988007406198875504089e-04j],
                              [  2.211633639181584572164229740565e-03 -9.131409864891318936119118943040e-06j,  -1.615454296026393394072884213131e-03 -3.807461750258685846855233325670e-04j,  -2.030326965338315280790951883327e-08 +2.295604699851100925257763041287e-04j,   8.244487921130520708285502676227e-07 +1.254303391781614923552318208166e-04j],
                              [  1.002722542274593663449988589775e-03 -4.140048492710100224670644736280e-06j,  -7.324234945348388108390946804604e-04 -1.726247809850672181378183900335e-04j,   7.893547294866525752190936689873e-08 -8.924899598733964777713678628857e-04j,  -3.205309126184042371830035245139e-06 -4.876506760446796639833777486928e-04j],
                              [  4.855432660774534826993165115283e-04 +8.549845584769307556965989292053e-06j,  -8.163114535209098571524877208105e-04 -9.320472295060919221392631284218e-05j,   3.131234488782613592561569152567e-07 +2.249883152980145797298489052096e-04j,   1.048156730865740444199468717201e-06 +7.806046504700461623194041038687e-04j],
                              [  4.061414835638978322596148728962e-03 -2.306465777221769486438063267997e-01j,  -4.427483991239515581650465492203e-02 +3.877706813446389344512965635658e-01j,   3.460771149031446197730232938738e-02 -4.816466120043914899990361577764e-05j,   1.200726379599036247602938942691e-01 -1.612275096260216739225967774729e-04j],
                              [  1.966638368094529836643813425212e-03 +4.763211415713424767837125273218e-01j,   8.200157997432164225237727350759e-02 -3.479215638644426733527836859139e-01j,   1.372828406470703033193103692611e-01 +1.214185757665369175663325901349e-05j,   7.501044612206053674441363909864e-02 -4.930407756004894686066575282268e-04j],
                              [ -8.916452477747687389159070292521e-04 -2.159570814797570903476042758484e-01j,  -3.717832433294615546159889163391e-02 +1.577425794461808361557331181757e-01j,   5.337310772364951549917577722226e-01 +4.720536589590850807835603619722e-05j,   2.916271693096055828142709742679e-01 -1.916854160528551776626615676946e-03j],
                              [  1.841386447147604294230505139751e-03 -1.045718055116141853577715892243e-01j,  -2.007356880863252202029656245941e-02 +1.758095900376687448218859799454e-01j,  -1.345485790378462276351001492003e-01 +1.872555695018804367002474009496e-04j,  -4.668208940348858582147784090921e-01 +6.268236583668184043471871547126e-04j],
                              [  4.372315057501483491486649057833e-03 -2.483025116975000334829104531309e-01j,  -4.766406709270529923339054789722e-02 +4.174544235228322963671132583841e-01j,  -6.087627883163736641382805418711e-13 -4.208925108349408379230813154981e-15j,  -5.690751453708070537460175023240e-13 +8.053587580771414872946266186818e-15j],
                              [  2.117184010365229761274630249090e-03 +5.127833978505461631769435371098e-01j,   8.827877903892739075430995399074e-02 -3.745548667339878012860765466030e-01j,   7.079295858863209328432898031312e-13 -2.704922463123007566238242411681e-16j,   8.284680656801305953002289375778e-13 -7.818878795519552447751224904466e-15j],
                              [ -5.214209919028184099705411144460e-15 -7.636955138273273139723768205938e-13j,  -1.350413421156207264932784643987e-13 +4.607221458841663754890976473244e-13j,   5.769003000629406852084457568708e-01 +5.102342903379654284832384059101e-05j,   3.152145502768660678682977049903e-01 -2.071893107881881378184996123082e-03j],
                              [  3.213383360173677146469300447453e-15 +2.092388346451911039201656883721e-13j,   3.553099554863528968578008963065e-14 -1.597492655675313250591167853107e-13j,  -1.454311336290608769328258631504e-01 +2.024011694956440307255340904646e-04j,  -5.045782891895158606132554268697e-01 +6.775223926151754602620336243035e-04j],
                              [  4.061414835640177883879786691068e-03 -2.306465777219801616126915178029e-01j,  -4.427483991236261934298923392817e-02 +3.877706813443073108338410293072e-01j,  -3.460771148804040603375042906009e-02 +4.816466120255818826470864402189e-05j,  -1.200726379622505807232002439378e-01 +1.612275095457029740978610599100e-04j],
                              [  1.966638368096111470773035279080e-03 +4.763211415719553198933056137321e-01j,   8.200157997442968083046110905343e-02 -3.479215638649104103130582643644e-01j,  -1.372828406433327097513341641388e-01 -1.214185758352328311886203504599e-05j,  -7.501044611873083911568471648934e-02 +4.930407755146017914280043292763e-04j],
                              [  8.916452477703801053621202044042e-04 +2.159570814779748770817491276830e-01j,   3.717832433263604935413937369049e-02 -1.577425794445366791229901082261e-01j,   5.337310772408733194893670770398e-01 +4.720536591152942870524764074069e-05j,   2.916271693107310714054847267107e-01 -1.916854160453631671784391343749e-03j],
                              [ -1.841386447142304063490092502775e-03 +1.045718055121329370660276936178e-01j,   2.007356880871711060643214352694e-02 -1.758095900381889953312253283002e-01j,  -1.345485790200408315886448917809e-01 +1.872555695032535787517002923153e-04j,  -4.668208940338164358863082270545e-01 +6.268236578562180532844805291859e-04j]])

    rotor2_evals, rotor2_evects = rotor2._eigen()
    mac1 = MAC_modes(evects_sorted, rotor2_evects[:, :4])
    mac2 = MAC_modes(evects_sorted, rotor2.evectors[:, :4])
    print(rotor2.w)
    print(mac1)
    assert_allclose(mac1.diagonal(), np.ones_like(mac1.diagonal()))
    assert_allclose(mac2.diagonal(), np.ones_like(mac1.diagonal()))


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_evects_not_sorted_rotor2(rotor2):
    evects = np.array([[  4.165e-07 +2.248e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 -2.232e-07j,   4.060e-07 +2.232e-07j],
                       [  2.780e-18 +4.772e-07j,   2.780e-18 -4.772e-07j,   2.687e-18 -4.869e-07j,   2.687e-18 +4.869e-07j],
                       [  8.767e-17 +1.509e-05j,   8.767e-17 -1.509e-05j,   8.476e-17 -1.540e-05j,   8.476e-17 +1.540e-05j],
                       [ -1.317e-05 -7.111e-06j,  -1.317e-05 +7.111e-06j,  -1.284e-05 +7.058e-06j,  -1.284e-05 -7.058e-06j],
                       [  1.395e-08 +7.530e-09j,   1.395e-08 -7.530e-09j,   1.360e-08 -7.474e-09j,   1.360e-08 +7.474e-09j],
                       [  4.612e-20 +1.598e-08j,   4.612e-20 -1.598e-08j,   4.448e-20 -1.631e-08j,   4.448e-20 +1.631e-08j],
                       [  5.150e-19 -4.067e-19j,   5.150e-19 +4.067e-19j,   4.970e-19 +4.284e-19j,   4.970e-19 -4.284e-19j],
                       [  1.513e-19 +7.428e-19j,   1.513e-19 -7.428e-19j,   1.511e-19 -7.555e-19j,   1.511e-19 +7.555e-19j],
                       [  4.165e-07 +2.248e-07j,   4.165e-07 -2.248e-07j,   4.060e-07 -2.232e-07j,   4.060e-07 +2.232e-07j],
                       [ -1.090e-20 +4.772e-07j,  -1.090e-20 -4.772e-07j,  -1.074e-20 -4.869e-07j,  -1.074e-20 +4.869e-07j],
                       [  2.726e-19 -1.509e-05j,   2.726e-19 +1.509e-05j,   2.549e-19 +1.540e-05j,   2.549e-19 -1.540e-05j],
                       [  1.317e-05 +7.111e-06j,   1.317e-05 -7.111e-06j,   1.284e-05 -7.058e-06j,   1.284e-05 +7.058e-06j],
                       [ -7.476e-03 +1.385e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 +1.350e-02j,   7.420e-03 -1.350e-02j],
                       [ -1.587e-02 +9.270e-14j,  -1.587e-02 -9.270e-14j,   1.619e-02 +8.961e-14j,   1.619e-02 -8.961e-14j],
                       [ -5.018e-01 +2.924e-12j,  -5.018e-01 -2.924e-12j,   5.120e-01 +2.826e-12j,   5.120e-01 -2.826e-12j],
                       [  2.364e-01 -4.379e-01j,   2.364e-01 +4.379e-01j,  -2.347e-01 -4.269e-01j,  -2.347e-01 +4.269e-01j],
                       [ -2.504e-04 +4.638e-04j,  -2.504e-04 -4.638e-04j,   2.485e-04 +4.521e-04j,   2.485e-04 -4.521e-04j],
                       [ -5.314e-04 +1.541e-15j,  -5.314e-04 -1.541e-15j,   5.422e-04 +1.489e-15j,   5.422e-04 -1.489e-15j],
                       [  1.351e-14 +1.710e-14j,   1.351e-14 -1.710e-14j,  -1.423e-14 +1.653e-14j,  -1.423e-14 -1.653e-14j],
                       [ -2.464e-14 +5.031e-15j,  -2.464e-14 -5.031e-15j,   2.507e-14 +5.019e-15j,   2.507e-14 -5.019e-15j],
                       [ -7.476e-03 +1.385e-02j,  -7.476e-03 -1.385e-02j,   7.420e-03 +1.350e-02j,   7.420e-03 -1.350e-02j],
                       [ -1.587e-02 -9.081e-17j,  -1.587e-02 +9.081e-17j,   1.619e-02 -8.172e-17j,   1.619e-02 +8.172e-17j],
                       [  5.018e-01 +0.000e+00j,   5.018e-01 -0.000e+00j,  -5.120e-01 +0.000e+00j,  -5.120e-01 -0.000e+00j],
                       [ -2.364e-01 +4.379e-01j,  -2.364e-01 -4.379e-01j,   2.347e-01 +4.269e-01j,   2.347e-01 -4.269e-01j]])
    rotor2_evals, rotor2_evects = rotor2._eigen(sorted_=False)
    assert_allclose(rotor2_evects[:, 0:4], evects, rtol=1e-3)


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_kappa_rotor2(rotor2):
    assert_allclose(rotor2.kappa(0, 0)['Frequency'], 34.27731, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Major axes'], 0.002456923, rtol=1e-1)
    assert_allclose(rotor2.kappa(0, 0)['Minor axes'], 8.039315263553689e-06, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['kappa'], -0.00327153425, rtol=1e-3)

    rotor2.w = 2000
    assert_allclose(rotor2.kappa(0, 0)['Frequency'], 25.7839904, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Major axes'], 0.00061657, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['Minor axes'], 0.00060573, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 0)['kappa'], -0.98242121, rtol=1e-3)

    assert_allclose(rotor2.kappa(0, 1)['Frequency'], 34.27730466, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['Major axes'], 0.0024574521, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['Minor axes'], 6.890315481064042e-08, rtol=1e-3)
    assert_allclose(rotor2.kappa(0, 1)['kappa'], 2.8038451836263183e-05, rtol=1e-3)


@pytest.mark.skip(reason="needs to be adapted according to ARPACK")
def test_kappa_mode_rotor2(rotor2):
    assert_allclose(rotor2.kappa_mode(0), [-0.0032715342590611774,
                                           -0.003271534259070017,
                                           -0.003271534259059628], rtol=1e-3)

    assert_allclose(rotor2.kappa_mode(1), [0.01653978084519139,
                                           0.016539780845213483,
                                           0.016539780845234074], rtol=1e-3)


#  TODO implement more tests using a simple rotor with 2 elements and one disk
#  TODO add test for damped case

