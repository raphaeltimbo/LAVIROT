from LAVIROT.elements import *
from LAVIROT.rotor import *
from numpy.testing import (assert_array_almost_equal,
                           assert_almost_equal)


n_ = 1
x0_ = 0
le_ = 0.25
i_d_ = 0
o_d_ = 0.05
E_ = 211e9
G_ = 81.2e9
rho_ = 7810


def test_rotor_no_damping_2_shaft_elements():

    evalues = np.array([-3.8 + 68.6j, -3.8 - 68.6j, -1.8 + 30.j, -1.8 - 30.j, -0.7 + 14.4j, -0.7 - 14.4j])
    evalues2 = np.array([ 0.+68.7j,  0.-68.7j,  0.+30.1j,  0.-30.1j, -0.+14.4j, -0.-14.4j])

    Mr1 = np.array([[ 1.421,  0.   ,  0.   ,  0.049,  0.496,  0.   ,  0.   , -0.031,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   ,  1.421, -0.049,  0.   ,  0.   ,  0.496,  0.031,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.   , -0.049,  0.002,  0.   ,  0.   , -0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.049,  0.   ,  0.   ,  0.002,  0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.   ],
                    [ 0.496,  0.   ,  0.   ,  0.031,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   , -0.031],
                    [ 0.   ,  0.496, -0.031,  0.   ,  0.   ,  2.841,  0.   ,  0.   ,  0.   ,  0.496,  0.031,  0.   ],
                    [ 0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.   ,  0.   , -0.031, -0.002,  0.   ],
                    [-0.031,  0.   ,  0.   , -0.002,  0.   ,  0.   ,  0.   ,  0.005,  0.031,  0.   ,  0.   , -0.002],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.496,  0.   ,  0.   ,  0.031,  1.421,  0.   ,  0.   , -0.049],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.496, -0.031,  0.   ,  0.   ,  1.421,  0.049,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.031, -0.002,  0.   ,  0.   ,  0.049,  0.002,  0.   ],
                    [ 0.   ,  0.   ,  0.   ,  0.   , -0.031,  0.   ,  0.   , -0.002, -0.049,  0.   ,  0.   ,  0.002]])

    tim0 = BeamElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                       shear_effects=True,
                       rotary_inertia=True,
                       gyroscopic=True)
    tim1 = BeamElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                       shear_effects=True,
                       rotary_inertia=True,
                       gyroscopic=True)

    shaft_elm = [tim0, tim1]
    rotor1 = Rotor(shaft_elm, [], [])
    assert_array_almost_equal([4, 2, 0, 5, 3, 1], rotor1.index(evalues))
    assert_array_almost_equal([4, 2, 0, 5, 3, 1], rotor1.index(evalues2))
    assert_almost_equal(rotor1.M, Mr1, decimal=3)


def test_rotor_no_damping_2_shaft_elements_1_disk_2_simple_bearings():

    Mr1 = np.array([[  1.421,   0.   ,   0.   ,   0.049,   0.496,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,   1.421,  -0.049,   0.   ,   0.   ,   0.496,   0.031,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.   ,  -0.049,   0.002,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.049,   0.   ,   0.   ,   0.002,   0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.   ],
                    [  0.496,   0.   ,   0.   ,   0.031,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,  -0.031],
                    [  0.   ,   0.496,  -0.031,   0.   ,   0.   ,  35.431,   0.   ,   0.   ,   0.   ,   0.496,   0.031,   0.   ],
                    [  0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.   ,   0.   ,  -0.031,  -0.002,   0.   ],
                    [ -0.031,   0.   ,   0.   ,  -0.002,   0.   ,   0.   ,   0.   ,   0.183,   0.031,   0.   ,   0.   ,  -0.002],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.496,   0.   ,   0.   ,   0.031,   1.421,   0.   ,   0.   ,  -0.049],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.496,  -0.031,   0.   ,   0.   ,   1.421,   0.049,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,   0.   ,   0.031,  -0.002,   0.   ,   0.   ,   0.049,   0.002,   0.   ],
                    [  0.   ,   0.   ,   0.   ,   0.   ,  -0.031,   0.   ,   0.   ,  -0.002,  -0.049,   0.   ,   0.   ,   0.002]])

    A0_0 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])

    A0_1 = np.array([[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]])

    A1_0 = np.array([[  20.63 ,   -0.   ,    0.   ,    4.114,  -20.958,    0.   ,    0.   ,    1.11 ,    0.056,   -0.   ,   -0.   ,   -0.014],
                     [   0.   ,   20.63 ,   -4.114,    0.   ,   -0.   ,  -20.958,   -1.11 ,    0.   ,   -0.   ,    0.056,    0.014,    0.   ],
                     [   0.   ,  697.351, -131.328,    0.   ,   -0.   , -705.253,  -44.535,    0.   ,   -0.   ,    2.079,    0.596,    0.   ],
                     [-697.351,    0.   ,   -0.   , -131.328,  705.253,   -0.   ,   -0.   ,  -44.535,   -2.079,    0.   ,    0.   ,    0.596],
                     [   0.442,    0.   ,   -0.   ,    0.072,   -0.887,   -0.   ,   -0.   ,   -0.   ,    0.442,    0.   ,    0.   ,   -0.072],
                     [   0.   ,    0.442,   -0.072,    0.   ,   -0.   ,   -0.887,    0.   ,    0.   ,    0.   ,    0.442,    0.072,   -0.   ],
                     [   0.   ,    6.457,   -0.837,    0.   ,   -0.   ,    0.   ,   -1.561,    0.   ,   -0.   ,   -6.457,   -0.837,   -0.   ],
                     [  -6.457,   -0.   ,    0.   ,   -0.837,    0.   ,    0.   ,    0.   ,   -1.561,    6.457,    0.   ,    0.   ,   -0.837],
                     [   0.056,   -0.   ,    0.   ,    0.014,  -20.958,    0.   ,    0.   ,   -1.11 ,   20.63 ,    0.   ,    0.   ,   -4.114],
                     [   0.   ,    0.056,   -0.014,    0.   ,   -0.   ,  -20.958,    1.11 ,    0.   ,    0.   ,   20.63 ,    4.114,   -0.   ],
                     [  -0.   ,   -2.079,    0.596,   -0.   ,    0.   ,  705.253,  -44.535,   -0.   ,   -0.   , -697.351, -131.328,    0.   ],
                     [   2.079,    0.   ,   -0.   ,    0.596, -705.253,   -0.   ,    0.   ,  -44.535,  697.351,    0.   ,    0.   , -131.328]])

    A1_1 = np.array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                     [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])

    evals_sorted = np.array([-0. + 215.371j, 0. + 215.371j, -0. + 598.025j, 0. + 598.025j,
                             -0. + 3956.225j, 0. + 3956.225j, 0. + 4965.29j, -0. + 4965.29j,
                             0. + 33048.281j, -0. + 33048.281j, 0. + 33249.826j, -0. + 33249.826j,
                             -0. - 215.371j, 0. - 215.371j, -0. - 598.025j, 0. - 598.025j,
                             -0. - 3956.225j, 0. - 3956.225j, 0. - 4965.29j, -0. - 4965.29j,
                             0. - 33048.281j, -0. - 33048.281j, 0. - 33249.826j, -0. - 33249.826j])

    evects_sorted = np.array([[-0.000+0.j   , -0.000-0.002j,  0.000+0.j   ,  0.000-0.j   ,  0.000-0.j   , -0.000+0.j   ],
                              [ 0.000-0.002j, -0.000-0.001j, -0.000-0.j   , -0.000-0.j   ,  0.000-0.j   , -0.000+0.j   ],
                              [ 0.000+0.001j,  0.000+0.j   , -0.000-0.j   , -0.000-0.001j,  0.000-0.j   , -0.000+0.j   ],
                              [-0.000+0.j   ,  0.000-0.001j, -0.000-0.001j, -0.000+0.j   , -0.000+0.j   ,  0.000-0.j   ],
                              [-0.000+0.j   ,  0.000-0.002j,  0.000+0.j   ,  0.000+0.j   , -0.000+0.j   ,  0.000-0.j   ],
                              [ 0.000-0.003j, -0.000-0.001j,  0.000-0.j   , -0.000+0.j   , -0.000+0.j   ,  0.000-0.j   ],
                              [ 0.000+0.j   ,  0.000-0.j   , -0.000-0.j   , -0.000-0.001j,  0.000+0.j   ,  0.000+0.j   ],
                              [-0.000+0.j   ,  0.000-0.j   , -0.000-0.001j, -0.000+0.j   ,  0.000+0.j   ,  0.000+0.j   ],
                              [-0.000+0.j   ,  0.000-0.002j, -0.000-0.j   , -0.000+0.j   ,  0.000-0.j   , -0.000+0.j   ],
                              [ 0.000-0.002j, -0.000-0.001j,  0.000+0.j   ,  0.000+0.j   ,  0.000-0.j   , -0.000+0.j   ],
                              [ 0.000-0.001j, -0.000-0.j   , -0.000-0.j   , -0.000-0.001j, -0.000+0.j   ,  0.000-0.j   ],
                              [ 0.000-0.j   ,  0.000+0.001j, -0.000-0.001j, -0.000+0.j   ,  0.000-0.j   , -0.000+0.j   ],
                              [-0.052-0.017j,  0.483-0.j   , -0.139+0.j   ,  0.061+0.002j,  0.109+0.j   , -0.076-0.021j],
                              [ 0.526-0.j   ,  0.215-0.011j,  0.024-0.006j,  0.128-0.j   ,  0.049+0.013j, -0.091-0.j   ],
                              [-0.239-0.j   , -0.098+0.005j,  0.095-0.025j,  0.498-0.j   ,  0.283+0.072j, -0.528-0.j   ],
                              [-0.023-0.008j,  0.219-0.j   ,  0.542+0.j   , -0.235-0.009j, -0.633-0.j   ,  0.439+0.119j],
                              [-0.056-0.018j,  0.520+0.j   , -0.000+0.j   , -0.000-0.j   , -0.008-0.j   ,  0.006+0.002j],
                              [ 0.567+0.j   ,  0.232-0.012j,  0.000+0.j   , -0.000-0.j   , -0.004-0.001j,  0.007+0.j   ],
                              [-0.000+0.j   ,  0.000-0.j   ,  0.102-0.027j,  0.538+0.j   ,  0.000+0.j   , -0.000+0.j   ],
                              [-0.000+0.j   ,  0.000+0.j   ,  0.585+0.j   , -0.254-0.009j, -0.000+0.j   , -0.000-0.j   ],
                              [-0.052-0.017j,  0.483+0.j   ,  0.139-0.j   , -0.061-0.002j,  0.109+0.j   , -0.076-0.021j],
                              [ 0.526+0.j   ,  0.215-0.011j, -0.024+0.006j, -0.128+0.j   ,  0.049+0.013j, -0.091+0.j   ],
                              [ 0.239+0.j   ,  0.098-0.005j,  0.095-0.025j,  0.498-0.j   , -0.283-0.072j,  0.528+0.j   ],
                              [ 0.023+0.008j, -0.219+0.j   ,  0.542+0.j   , -0.235-0.009j,  0.633+0.j   , -0.439-0.119j]])

    evals = np.array([ 0.+33249.826j,  0.-33249.826j, -0.+33249.826j, -0.-33249.826j,
                      0.+33048.281j,  0.-33048.281j, -0.+33048.281j, -0.-33048.281j,
                      0. +4965.29j ,  0. -4965.29j , -0. +4965.29j , -0. -4965.29j ,
                      -0. +3956.225j, -0. -3956.225j,  0. +3956.225j,  0. -3956.225j,
                      -0.  +598.025j, -0.  -598.025j,  0.  +598.025j,  0.  -598.025j,
                      0.  +215.371j,  0.  -215.371j, -0.  +215.371j, -0.  -215.371j])

    evects = np.array([[ 0.000+0.j   ,  0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000+0.j   , -0.000-0.j   ],
                       [ 0.000+0.j   ,  0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000+0.j   , -0.000-0.j   ],
                       [ 0.000+0.j   ,  0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000+0.j   , -0.000-0.j   ],
                       [-0.000-0.j   , -0.000+0.j   ,  0.000-0.j   ,  0.000+0.j   ,  0.000-0.j   ,  0.000+0.j   ],
                       [ 0.000+0.j   ,  0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000+0.j   , -0.000-0.j   ],
                       [ 0.000+0.j   ,  0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000-0.j   , -0.000+0.j   ],
                       [ 0.000-0.j   ,  0.000+0.j   , -0.000-0.j   , -0.000+0.j   , -0.000+0.j   , -0.000-0.j   ],
                       [ 0.000+0.j   ,  0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000-0.j   , -0.000+0.j   ],
                       [ 0.000+0.j   ,  0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000-0.j   , -0.000+0.j   ],
                       [-0.000+0.j   , -0.000-0.j   ,  0.000+0.j   ,  0.000-0.j   ,  0.000-0.j   ,  0.000+0.j   ],
                       [ 0.000-0.j   ,  0.000+0.j   , -0.000-0.j   , -0.000+0.j   , -0.000+0.j   , -0.000-0.j   ],
                       [ 0.000+0.j   ,  0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000-0.j   , -0.000+0.j   ],
                       [-0.007+0.014j, -0.007-0.014j, -0.007-0.014j, -0.007+0.014j, -0.016+0.j   , -0.016-0.j   ],
                       [-0.016+0.j   , -0.016-0.j   , -0.016-0.j   , -0.016+0.j   , -0.008-0.014j, -0.008+0.014j],
                       [-0.505+0.j   , -0.505-0.j   , -0.501-0.j   , -0.501+0.j   , -0.242-0.431j, -0.242+0.431j],
                       [ 0.230-0.438j,  0.230+0.438j,  0.236+0.439j,  0.236-0.439j,  0.505+0.j   ,  0.505-0.j   ],
                       [-0.000+0.j   , -0.000-0.j   , -0.000-0.j   , -0.000+0.j   , -0.000-0.j   , -0.000+0.j   ],
                       [-0.001+0.j   , -0.001-0.j   , -0.001-0.j   , -0.001+0.j   ,  0.000-0.j   ,  0.000+0.j   ],
                       [ 0.000+0.j   ,  0.000-0.j   ,  0.000-0.j   ,  0.000+0.j   , -0.003-0.005j, -0.003+0.005j],
                       [-0.000+0.j   , -0.000-0.j   , -0.000-0.j   , -0.000+0.j   ,  0.006-0.j   ,  0.006+0.j   ],
                       [-0.007+0.014j, -0.007-0.014j, -0.007-0.014j, -0.007+0.014j,  0.016-0.j   ,  0.016+0.j   ],
                       [-0.016-0.j   , -0.016+0.j   , -0.016+0.j   , -0.016-0.j   ,  0.008+0.014j,  0.008-0.014j],
                       [ 0.505+0.j   ,  0.505-0.j   ,  0.501+0.j   ,  0.501-0.j   , -0.242-0.431j, -0.242+0.431j],
                       [-0.230+0.438j, -0.230-0.438j, -0.236-0.439j, -0.236+0.439j,  0.505-0.j   ,  0.505+0.j   ]])

    tim0 = BeamElement(0, 0.0, le_, i_d_, o_d_, E_, G_, rho_,
                       shear_effects=True,
                       rotary_inertia=True,
                       gyroscopic=True)
    tim1 = BeamElement(1, 0.25, le_, i_d_, o_d_, E_, G_, rho_,
                       shear_effects=True,
                       rotary_inertia=True,
                       gyroscopic=True)

    shaft_elm = [tim0, tim1]
    disk0 = DiskElement(1, rho_, 0.07, 0.05, 0.28)
    stf = 1e6
    bearing0 = Bearing(0, stf, stf, 0, 0)
    bearing1 = Bearing(2, stf, stf, 0, 0)

    rotor1 = Rotor(shaft_elm, [disk0], [bearing0, bearing1])
    assert_almost_equal(rotor1.M, Mr1, decimal=3)
    assert_almost_equal(rotor1.A[:12, :12], A0_0, decimal=3)
    assert_almost_equal(rotor1.A[:12, 12:24], A0_1, decimal=3)
    assert_almost_equal(rotor1.A[12:24, :12]/1e7, A1_0, decimal=3)
    assert_almost_equal(rotor1.A[12:24, 12:24]/1e7, A1_1, decimal=3)
    #  sorted eigenvalues, eigenvectors
    rotor1_evals, rotor1_evects = rotor1.eigen()
    assert_almost_equal(rotor1_evals, evals_sorted, decimal=3)
    assert_almost_equal(rotor1_evects[:, 0:6], evects_sorted, decimal=3)
    #  not sorted
    rotor1_evals, rotor1_evects = rotor1.eigen(sorted_=False)
    assert_almost_equal(rotor1_evals, evals, decimal=3)
    assert_almost_equal(rotor1_evects[:, 0:6], evects, decimal=3)
#  TODO implement more tests using a simple rotor with 2 elements and one disk
#  TODO add test for rotor with disks and bearings

